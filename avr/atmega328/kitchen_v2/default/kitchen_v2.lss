
kitchen_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000014d6  0000156a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  0080010a  0080010a  00001574  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00001cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007f3  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a6d  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b52  00000000  00000000  000040e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022a7  00000000  00000000  00004c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000560  00000000  00000000  00006ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007f4  00000000  00000000  00007440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004e5  00000000  00000000  00007c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000287  00000000  00000000  00008119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_18>
      4c:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ed       	ldi	r30, 0xD6	; 214
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 30       	cpi	r26, 0x0A	; 10
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e0       	ldi	r26, 0x0A	; 10
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 39       	cpi	r26, 0x95	; 149
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a6:	8f e3       	ldi	r24, 0x3F	; 63
      a8:	9c e9       	ldi	r25, 0x9C	; 156
      aa:	01 97       	sbiw	r24, 0x01	; 1
      ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x4>
      ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0xa>
      b0:	00 00       	nop
volatile u08 time_di=TIME_DI_WORK;

int main() {
//--------------------------------***---INITIALISATION---***
_delay_ms(20);
InitPortsKn1();
      b2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <InitPortsKn1>
InitPortsKn2();
      b6:	0e 94 ef 06 	call	0xdde	; 0xdde <InitPortsKn2>

InitPortsDI();
      ba:	0e 94 1a 04 	call	0x834	; 0x834 <InitPortsDI>

InitPortsTrig();
      be:	0e 94 8b 05 	call	0xb16	; 0xb16 <InitPortsTrig>
InitPortsNasosHotWater();
      c2:	0e 94 3c 05 	call	0xa78	; 0xa78 <InitPortsNasosHotWater>
InitPortsNasos();
      c6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <InitPortsNasos>
NasosOff();
      ca:	0e 94 51 02 	call	0x4a2	; 0x4a2 <NasosOff>

InitPortsBuzzer();
      ce:	0e 94 7e 02 	call	0x4fc	; 0x4fc <InitPortsBuzzer>
BuzzerOn();
      d2:	0e 94 75 02 	call	0x4ea	; 0x4ea <BuzzerOn>
      d6:	8f e0       	ldi	r24, 0x0F	; 15
      d8:	97 e2       	ldi	r25, 0x27	; 39
      da:	01 97       	sbiw	r24, 0x01	; 1
      dc:	f1 f7       	brne	.-4      	; 0xda <main+0x34>
      de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x3a>
      e0:	00 00       	nop
_delay_ms(5);
BuzzerOff();
      e2:	0e 94 77 02 	call	0x4ee	; 0x4ee <BuzzerOff>

InitGTimers();
      e6:	0e 94 69 07 	call	0xed2	; 0xed2 <InitGTimers>
InitMessages();
      ea:	0e 94 8a 07 	call	0xf14	; 0xf14 <InitMessages>
OWI_Init();    
      ee:	0e 94 b8 08 	call	0x1170	; 0x1170 <OWI_Init>
      f2:	8f e0       	ldi	r24, 0x0F	; 15
      f4:	97 e2       	ldi	r25, 0x27	; 39
      f6:	01 97       	sbiw	r24, 0x01	; 1
      f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x50>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x56>
      fc:	00 00       	nop

_delay_ms(5);

if ( (BIC(PIN_KN1,KN1))||(BIC(PIN_KN2,KN2)) ) {
      fe:	4b 9b       	sbis	0x09, 3	; 9
     100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x60>
     102:	4c 99       	sbic	0x09, 4	; 9
     104:	04 c0       	rjmp	.+8      	; 0x10e <main+0x68>
	work_mode=DIST;
     106:	84 e0       	ldi	r24, 0x04	; 4
     108:	80 93 12 01 	sts	0x0112, r24
     10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x6c>
}
else
	work_mode=WORK;
     10e:	10 92 12 01 	sts	0x0112, r1
//-------------------------------Timer 0 ----------------------------
TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(1<<WGM01)|(0<<WGM00);
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	84 bd       	out	0x24, r24	; 36
TCCR0B = (0<<CS02)|(1<<CS01)|(1<<CS00);
     116:	93 e0       	ldi	r25, 0x03	; 3
     118:	95 bd       	out	0x25, r25	; 37
OCR0A=125;
     11a:	9d e7       	ldi	r25, 0x7D	; 125
     11c:	97 bd       	out	0x27, r25	; 39
TIMSK0 = (1<<OCIE0A);
     11e:	80 93 6e 00 	sts	0x006E, r24
//OCR1A=2000;
//TCCR1A = (0<<COM1A1)|(1<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
//TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10); //8
//TIMSK1 = (1<<OCIE1A);
//----------------------------------------------------**--MAIN--**
SEI
     122:	78 94       	sei
EEARH=0;
     124:	12 bc       	out	0x22, r1	; 34
ReadingDataFromEeprom();
     126:	0e 94 b6 02 	call	0x56c	; 0x56c <ReadingDataFromEeprom>
//---------------------------------------------------
  while(1)  {  
//---------------------Обработка кнопок---------
	StartGTimer(timer_kn,5);
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	65 e0       	ldi	r22, 0x05	; 5
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
	if (ExpGTimer(timer_kn)) {		//10ms
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     13a:	88 23       	and	r24, r24
     13c:	41 f0       	breq	.+16     	; 0x14e <main+0xa8>
		ProcessKn1(&f1_hold);		
     13e:	8a e0       	ldi	r24, 0x0A	; 10
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ProcessKn1>
		ProcessKn2(&f2_hold);		
     146:	8b e0       	ldi	r24, 0x0B	; 11
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 6d 06 	call	0xcda	; 0xcda <ProcessKn2>
	}
//----------------------------------------------
	StartGTimer(timer_di,time_di);
     14e:	60 91 00 01 	lds	r22, 0x0100
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
	if (ExpGTimer(timer_di)) {		//10ms
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     160:	88 23       	and	r24, r24
     162:	31 f0       	breq	.+12     	; 0x170 <main+0xca>
		di(data_di);		
     164:	80 91 10 01 	lds	r24, 0x0110
     168:	90 91 11 01 	lds	r25, 0x0111
     16c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <di>
	}
//----------------------------------------------
if((work_mode==WORK)||(work_mode==ALARM)) {
     170:	80 91 12 01 	lds	r24, 0x0112
     174:	88 23       	and	r24, r24
     176:	11 f0       	breq	.+4      	; 0x17c <main+0xd6>
     178:	83 30       	cpi	r24, 0x03	; 3
     17a:	31 f4       	brne	.+12     	; 0x188 <main+0xe2>
	if (!OWIStatus.busy) {
     17c:	80 91 91 01 	lds	r24, 0x0191
     180:	80 fd       	sbrc	r24, 0
     182:	02 c0       	rjmp	.+4      	; 0x188 <main+0xe2>
		ProcessDS18B20();
     184:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <ProcessDS18B20>
	}		
}
//-------------------------------
Algorithm();
     188:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Algorithm>
//-------------------------------
BuzzerSound();
     18c:	0e 94 81 02 	call	0x502	; 0x502 <BuzzerSound>
//-------------------------------
Setup();
     190:	0e 94 41 01 	call	0x282	; 0x282 <Setup>
//-------------------------------
StartTrig();
     194:	0e 94 8e 05 	call	0xb1c	; 0xb1c <StartTrig>
//-------------------------------
HotWater();
     198:	0e 94 8a 04 	call	0x914	; 0x914 <HotWater>
//-------------------------------
//+++++++++++++++++++++++++++++++
//-------------------------------
ProcessMessages();
     19c:	0e 94 af 07 	call	0xf5e	; 0xf5e <ProcessMessages>
//-------------------------------
  }//while
     1a0:	c4 cf       	rjmp	.-120    	; 0x12a <main+0x84>

000001a2 <Algorithm>:
volatile u16 t_min=T_MIN;
volatile u16 t_max=T_MAX;
u16 tmp=0;
//------------------------------------------
void Algorithm() {
	switch(work_mode){
     1a2:	80 91 12 01 	lds	r24, 0x0112
     1a6:	88 23       	and	r24, r24
     1a8:	21 f0       	breq	.+8      	; 0x1b2 <Algorithm+0x10>
     1aa:	83 30       	cpi	r24, 0x03	; 3
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <Algorithm+0xe>
     1ae:	68 c0       	rjmp	.+208    	; 0x280 <Algorithm+0xde>
     1b0:	20 c0       	rjmp	.+64     	; 0x1f2 <Algorithm+0x50>
		case WORK:
			if(temp_data>=t_max*10) {
     1b2:	20 91 03 01 	lds	r18, 0x0103
     1b6:	30 91 04 01 	lds	r19, 0x0104
     1ba:	c9 01       	movw	r24, r18
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	43 e0       	ldi	r20, 0x03	; 3
     1c2:	22 0f       	add	r18, r18
     1c4:	33 1f       	adc	r19, r19
     1c6:	4a 95       	dec	r20
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <Algorithm+0x20>
     1ca:	82 0f       	add	r24, r18
     1cc:	93 1f       	adc	r25, r19
     1ce:	20 91 8b 01 	lds	r18, 0x018B
     1d2:	30 91 8c 01 	lds	r19, 0x018C
     1d6:	28 17       	cp	r18, r24
     1d8:	39 07       	cpc	r19, r25
     1da:	08 f4       	brcc	.+2      	; 0x1de <Algorithm+0x3c>
     1dc:	51 c0       	rjmp	.+162    	; 0x280 <Algorithm+0xde>
				allow_buzzer=ON;
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	80 93 14 01 	sts	0x0114, r24
				work_mode=ALARM;
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	80 93 12 01 	sts	0x0112, r24
				time_di=TIME_DI_ALARM;	
     1ea:	8a e0       	ldi	r24, 0x0A	; 10
     1ec:	80 93 00 01 	sts	0x0100, r24
     1f0:	08 95       	ret
			}
		break;
		case ALARM:
			if(temp_data<=t_min*10) {
     1f2:	20 91 8b 01 	lds	r18, 0x018B
     1f6:	30 91 8c 01 	lds	r19, 0x018C
     1fa:	40 91 01 01 	lds	r20, 0x0101
     1fe:	50 91 02 01 	lds	r21, 0x0102
     202:	ca 01       	movw	r24, r20
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	a3 e0       	ldi	r26, 0x03	; 3
     20a:	44 0f       	add	r20, r20
     20c:	55 1f       	adc	r21, r21
     20e:	aa 95       	dec	r26
     210:	e1 f7       	brne	.-8      	; 0x20a <Algorithm+0x68>
     212:	84 0f       	add	r24, r20
     214:	95 1f       	adc	r25, r21
     216:	82 17       	cp	r24, r18
     218:	93 07       	cpc	r25, r19
     21a:	38 f0       	brcs	.+14     	; 0x22a <Algorithm+0x88>
				allow_buzzer=OFF;
     21c:	10 92 14 01 	sts	0x0114, r1
				work_mode=WORK;
     220:	10 92 12 01 	sts	0x0112, r1
				time_di=TIME_DI_WORK;
     224:	85 e0       	ldi	r24, 0x05	; 5
     226:	80 93 00 01 	sts	0x0100, r24
			}
			if(temp_data>=((t_max+5)*10)) {
     22a:	40 91 03 01 	lds	r20, 0x0103
     22e:	50 91 04 01 	lds	r21, 0x0104
     232:	ca 01       	movw	r24, r20
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	e3 e0       	ldi	r30, 0x03	; 3
     23a:	44 0f       	add	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	ea 95       	dec	r30
     240:	e1 f7       	brne	.-8      	; 0x23a <Algorithm+0x98>
     242:	84 0f       	add	r24, r20
     244:	95 1f       	adc	r25, r21
     246:	c2 96       	adiw	r24, 0x32	; 50
     248:	28 17       	cp	r18, r24
     24a:	39 07       	cpc	r19, r25
     24c:	18 f0       	brcs	.+6      	; 0x254 <Algorithm+0xb2>
				allow_buzzer=ON;		
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 14 01 	sts	0x0114, r24
			}
			if(temp_data>=((t_max+10)*10)) {
     254:	40 91 03 01 	lds	r20, 0x0103
     258:	50 91 04 01 	lds	r21, 0x0104
     25c:	ca 01       	movw	r24, r20
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	63 e0       	ldi	r22, 0x03	; 3
     264:	44 0f       	add	r20, r20
     266:	55 1f       	adc	r21, r21
     268:	6a 95       	dec	r22
     26a:	e1 f7       	brne	.-8      	; 0x264 <Algorithm+0xc2>
     26c:	84 0f       	add	r24, r20
     26e:	95 1f       	adc	r25, r21
     270:	8c 59       	subi	r24, 0x9C	; 156
     272:	9f 4f       	sbci	r25, 0xFF	; 255
     274:	28 17       	cp	r18, r24
     276:	39 07       	cpc	r19, r25
     278:	18 f0       	brcs	.+6      	; 0x280 <Algorithm+0xde>
				allow_buzzer=ON;		
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	80 93 14 01 	sts	0x0114, r24
     280:	08 95       	ret

00000282 <Setup>:
		break;
	}
}
//------------------------------------------
void Setup() {
	if( (GetMessage(MSG_KN1_RELEASED))||(GetMessage(MSG_KN2_RELEASED)) )  {
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	0e 94 c0 07 	call	0xf80	; 0xf80 <GetMessage>
     288:	88 23       	and	r24, r24
     28a:	29 f4       	brne	.+10     	; 0x296 <Setup+0x14>
     28c:	87 e0       	ldi	r24, 0x07	; 7
     28e:	0e 94 c0 07 	call	0xf80	; 0xf80 <GetMessage>
     292:	88 23       	and	r24, r24
     294:	59 f1       	breq	.+86     	; 0x2ec <Setup+0x6a>
		switch(work_mode) {
     296:	80 91 12 01 	lds	r24, 0x0112
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	91 f0       	breq	.+36     	; 0x2c2 <Setup+0x40>
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	28 f0       	brcs	.+10     	; 0x2ac <Setup+0x2a>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	e9 f0       	breq	.+58     	; 0x2e0 <Setup+0x5e>
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	09 f0       	breq	.+2      	; 0x2ac <Setup+0x2a>
     2aa:	f5 c0       	rjmp	.+490    	; 0x496 <Setup+0x214>
			case WORK:
			case ALARM:
				work_mode=SET_MIN;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	80 93 12 01 	sts	0x0112, r24
				time_di=TIME_DI_SET_MIN;
     2b2:	84 e1       	ldi	r24, 0x14	; 20
     2b4:	80 93 00 01 	sts	0x0100, r24
				data_di=t_min;	
     2b8:	80 91 01 01 	lds	r24, 0x0101
     2bc:	90 91 02 01 	lds	r25, 0x0102
     2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <Setup+0x54>
			break;
			case SET_MIN:
				work_mode=SET_MAX;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	80 93 12 01 	sts	0x0112, r24
				time_di=TIME_DI_SET_MAX;
     2c8:	8a e0       	ldi	r24, 0x0A	; 10
     2ca:	80 93 00 01 	sts	0x0100, r24
				data_di=t_max;
     2ce:	80 91 03 01 	lds	r24, 0x0103
     2d2:	90 91 04 01 	lds	r25, 0x0104
     2d6:	90 93 11 01 	sts	0x0111, r25
     2da:	80 93 10 01 	sts	0x0110, r24
			break;
     2de:	08 95       	ret
			case SET_MAX:
				work_mode=WORK;
     2e0:	10 92 12 01 	sts	0x0112, r1
				time_di=TIME_DI_WORK;
     2e4:	85 e0       	ldi	r24, 0x05	; 5
     2e6:	80 93 00 01 	sts	0x0100, r24
			break;
     2ea:	08 95       	ret
			break;
		}									
		return;
	}
	
	if(GetMessage(MSG_KN1_PRESSED)) {
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	0e 94 c0 07 	call	0xf80	; 0xf80 <GetMessage>
     2f2:	88 23       	and	r24, r24
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <Setup+0x76>
     2f6:	4f c0       	rjmp	.+158    	; 0x396 <Setup+0x114>
		switch(work_mode) {
     2f8:	80 91 12 01 	lds	r24, 0x0112
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	e1 f0       	breq	.+56     	; 0x338 <Setup+0xb6>
     300:	83 30       	cpi	r24, 0x03	; 3
     302:	08 f0       	brcs	.+2      	; 0x306 <Setup+0x84>
     304:	5b c0       	rjmp	.+182    	; 0x3bc <Setup+0x13a>
     306:	88 23       	and	r24, r24
     308:	09 f4       	brne	.+2      	; 0x30c <Setup+0x8a>
     30a:	5b c0       	rjmp	.+182    	; 0x3c2 <Setup+0x140>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	09 f0       	breq	.+2      	; 0x312 <Setup+0x90>
     310:	c2 c0       	rjmp	.+388    	; 0x496 <Setup+0x214>
				}		
				else
					IB(PORT_NASOS_VANNA,NASOS_VANNA);
			break;
			case SET_MIN:
				t_min--;//decrement t min				
     312:	80 91 01 01 	lds	r24, 0x0101
     316:	90 91 02 01 	lds	r25, 0x0102
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	90 93 02 01 	sts	0x0102, r25
     320:	80 93 01 01 	sts	0x0101, r24
				if(t_min==0) {
     324:	80 91 01 01 	lds	r24, 0x0101
     328:	90 91 02 01 	lds	r25, 0x0102
     32c:	00 97       	sbiw	r24, 0x00	; 0
     32e:	09 f0       	breq	.+2      	; 0x332 <Setup+0xb0>
     330:	71 c0       	rjmp	.+226    	; 0x414 <Setup+0x192>
					t_min=1;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	6a c0       	rjmp	.+212    	; 0x40c <Setup+0x18a>
				data_di=t_min;
				tmp=t_min;
				WriteEeprom_x16(ADR_T_MIN,&tmp);
			break;
			case SET_MAX:
				t_max--;//decrement t max
     338:	80 91 03 01 	lds	r24, 0x0103
     33c:	90 91 04 01 	lds	r25, 0x0104
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	90 93 04 01 	sts	0x0104, r25
     346:	80 93 03 01 	sts	0x0103, r24
				if(t_max==t_min) {
     34a:	20 91 03 01 	lds	r18, 0x0103
     34e:	30 91 04 01 	lds	r19, 0x0104
     352:	80 91 01 01 	lds	r24, 0x0101
     356:	90 91 02 01 	lds	r25, 0x0102
     35a:	28 17       	cp	r18, r24
     35c:	39 07       	cpc	r19, r25
     35e:	49 f4       	brne	.+18     	; 0x372 <Setup+0xf0>
					t_max=t_min+1;
     360:	80 91 01 01 	lds	r24, 0x0101
     364:	90 91 02 01 	lds	r25, 0x0102
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	90 93 04 01 	sts	0x0104, r25
     36e:	80 93 03 01 	sts	0x0103, r24
				}		
				data_di=t_max;
     372:	80 91 03 01 	lds	r24, 0x0103
     376:	90 91 04 01 	lds	r25, 0x0104
     37a:	90 93 11 01 	sts	0x0111, r25
     37e:	80 93 10 01 	sts	0x0110, r24
				tmp=t_max;
     382:	80 91 03 01 	lds	r24, 0x0103
     386:	90 91 04 01 	lds	r25, 0x0104
     38a:	90 93 16 01 	sts	0x0116, r25
     38e:	80 93 15 01 	sts	0x0115, r24
				WriteEeprom_x16(ADR_T_MAX,&tmp);
     392:	88 ec       	ldi	r24, 0xC8	; 200
     394:	50 c0       	rjmp	.+160    	; 0x436 <Setup+0x1b4>
			break;		
		}
		return;		
	}

	if(GetMessage(MSG_KN2_PRESSED)) {
     396:	85 e0       	ldi	r24, 0x05	; 5
     398:	0e 94 c0 07 	call	0xf80	; 0xf80 <GetMessage>
     39c:	88 23       	and	r24, r24
     39e:	09 f4       	brne	.+2      	; 0x3a2 <Setup+0x120>
     3a0:	7a c0       	rjmp	.+244    	; 0x496 <Setup+0x214>
		switch(work_mode) {
     3a2:	80 91 12 01 	lds	r24, 0x0112
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	09 f4       	brne	.+2      	; 0x3ac <Setup+0x12a>
     3aa:	4a c0       	rjmp	.+148    	; 0x440 <Setup+0x1be>
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	30 f4       	brcc	.+12     	; 0x3bc <Setup+0x13a>
     3b0:	88 23       	and	r24, r24
     3b2:	39 f0       	breq	.+14     	; 0x3c2 <Setup+0x140>
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	09 f0       	breq	.+2      	; 0x3ba <Setup+0x138>
     3b8:	6e c0       	rjmp	.+220    	; 0x496 <Setup+0x214>
     3ba:	0f c0       	rjmp	.+30     	; 0x3da <Setup+0x158>
     3bc:	85 30       	cpi	r24, 0x05	; 5
     3be:	08 f0       	brcs	.+2      	; 0x3c2 <Setup+0x140>
     3c0:	6a c0       	rjmp	.+212    	; 0x496 <Setup+0x214>
			case WORK:
			case ALARM:
			case DIST:
				if(allow_buzzer==ON) {
     3c2:	80 91 14 01 	lds	r24, 0x0114
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	19 f4       	brne	.+6      	; 0x3d0 <Setup+0x14e>
					allow_buzzer=OFF;
     3ca:	10 92 14 01 	sts	0x0114, r1
     3ce:	08 95       	ret
				}		
				else
					IB(PORT_NASOS_VANNA,NASOS_VANNA);
     3d0:	85 b1       	in	r24, 0x05	; 5
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	89 27       	eor	r24, r25
     3d6:	85 b9       	out	0x05, r24	; 5
     3d8:	08 95       	ret
			break;
			case SET_MIN:
				t_min++;//increment t min
     3da:	80 91 01 01 	lds	r24, 0x0101
     3de:	90 91 02 01 	lds	r25, 0x0102
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 02 01 	sts	0x0102, r25
     3e8:	80 93 01 01 	sts	0x0101, r24
				if(t_min==t_max) {
     3ec:	20 91 01 01 	lds	r18, 0x0101
     3f0:	30 91 02 01 	lds	r19, 0x0102
     3f4:	80 91 03 01 	lds	r24, 0x0103
     3f8:	90 91 04 01 	lds	r25, 0x0104
     3fc:	28 17       	cp	r18, r24
     3fe:	39 07       	cpc	r19, r25
     400:	49 f4       	brne	.+18     	; 0x414 <Setup+0x192>
					t_min=t_max-1;
     402:	80 91 03 01 	lds	r24, 0x0103
     406:	90 91 04 01 	lds	r25, 0x0104
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	90 93 02 01 	sts	0x0102, r25
     410:	80 93 01 01 	sts	0x0101, r24
				}		
				data_di=t_min;
     414:	80 91 01 01 	lds	r24, 0x0101
     418:	90 91 02 01 	lds	r25, 0x0102
     41c:	90 93 11 01 	sts	0x0111, r25
     420:	80 93 10 01 	sts	0x0110, r24
				tmp=t_min;
     424:	80 91 01 01 	lds	r24, 0x0101
     428:	90 91 02 01 	lds	r25, 0x0102
     42c:	90 93 16 01 	sts	0x0116, r25
     430:	80 93 15 01 	sts	0x0115, r24
				WriteEeprom_x16(ADR_T_MIN,&tmp);
     434:	84 e6       	ldi	r24, 0x64	; 100
     436:	65 e1       	ldi	r22, 0x15	; 21
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <WriteEeprom_x16>
			break;
     43e:	08 95       	ret
			case SET_MAX:
				t_max++;//increment t max				
     440:	80 91 03 01 	lds	r24, 0x0103
     444:	90 91 04 01 	lds	r25, 0x0104
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	90 93 04 01 	sts	0x0104, r25
     44e:	80 93 03 01 	sts	0x0103, r24
				if(t_max>50) {
     452:	80 91 03 01 	lds	r24, 0x0103
     456:	90 91 04 01 	lds	r25, 0x0104
     45a:	83 33       	cpi	r24, 0x33	; 51
     45c:	91 05       	cpc	r25, r1
     45e:	30 f0       	brcs	.+12     	; 0x46c <Setup+0x1ea>
					t_max=50;
     460:	82 e3       	ldi	r24, 0x32	; 50
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	90 93 04 01 	sts	0x0104, r25
     468:	80 93 03 01 	sts	0x0103, r24
				}		
				data_di=t_max;
     46c:	80 91 03 01 	lds	r24, 0x0103
     470:	90 91 04 01 	lds	r25, 0x0104
     474:	90 93 11 01 	sts	0x0111, r25
     478:	80 93 10 01 	sts	0x0110, r24
				tmp=t_max;
     47c:	80 91 03 01 	lds	r24, 0x0103
     480:	90 91 04 01 	lds	r25, 0x0104
     484:	90 93 16 01 	sts	0x0116, r25
     488:	80 93 15 01 	sts	0x0115, r24
				WriteEeprom_x16(ADR_T_MAX,&tmp);
     48c:	88 ec       	ldi	r24, 0xC8	; 200
     48e:	65 e1       	ldi	r22, 0x15	; 21
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	0e 94 79 04 	call	0x8f2	; 0x8f2 <WriteEeprom_x16>
     496:	08 95       	ret

00000498 <NasosOn>:
		}		
	}
}
//-----------------------------------------------------------
void NasosOn() {
	CB(PORT_NASOS_VANNA,NASOS_VANNA);
     498:	28 98       	cbi	0x05, 0	; 5
	allow_red_led_flashing=ON;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 13 01 	sts	0x0113, r24
}
     4a0:	08 95       	ret

000004a2 <NasosOff>:
void NasosOff() {
	SB(PORT_NASOS_VANNA,NASOS_VANNA);
     4a2:	28 9a       	sbi	0x05, 0	; 5
	allow_red_led_flashing=OFF;
     4a4:	10 92 13 01 	sts	0x0113, r1
	StopGTimer(timer_flash_red);
     4a8:	88 e0       	ldi	r24, 0x08	; 8
     4aa:	0e 94 3b 07 	call	0xe76	; 0xe76 <StopGTimer>
}
     4ae:	08 95       	ret

000004b0 <ProcessNasos>:
		}
	}	
}
*/
//------------------------------------------------
void ProcessNasos() {
     4b0:	1f 93       	push	r17
volatile static u08 tmp_nasos_dush=0;

	if(GetMessage(MSG_KN1_FAST_PRESSED)) {
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 c0 07 	call	0xf80	; 0xf80 <GetMessage>
     4b8:	88 23       	and	r24, r24
     4ba:	91 f0       	breq	.+36     	; 0x4e0 <ProcessNasos+0x30>
		if(tmp_nasos_dush==0) {
     4bc:	80 91 17 01 	lds	r24, 0x0117
     4c0:	88 23       	and	r24, r24
     4c2:	41 f4       	brne	.+16     	; 0x4d4 <ProcessNasos+0x24>
			tmp_nasos_dush=1;
     4c4:	11 e0       	ldi	r17, 0x01	; 1
     4c6:	10 93 17 01 	sts	0x0117, r17
			NasosOn();
     4ca:	0e 94 4c 02 	call	0x498	; 0x498 <NasosOn>
			allow_red_led_flashing=ON;
     4ce:	10 93 13 01 	sts	0x0113, r17
			return;
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <ProcessNasos+0x30>
		}
		else {
			tmp_nasos_dush=0;
     4d4:	10 92 17 01 	sts	0x0117, r1
			NasosOff();
     4d8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <NasosOff>
			allow_red_led_flashing=OFF;
     4dc:	10 92 13 01 	sts	0x0113, r1
//			LedRedOff();
			return;
		}		
	}
}
     4e0:	1f 91       	pop	r17
     4e2:	08 95       	ret

000004e4 <InitPortsNasos>:
	SB(PORT_NASOS_VANNA,NASOS_VANNA);
	allow_red_led_flashing=OFF;
	StopGTimer(timer_flash_red);
}
void InitPortsNasos() {
	SB(DDR_NASOS_VANNA,NASOS_VANNA);
     4e4:	20 9a       	sbi	0x04, 0	; 4
	SB(PORT_NASOS_VANNA,NASOS_VANNA);
     4e6:	28 9a       	sbi	0x05, 0	; 5
}
     4e8:	08 95       	ret

000004ea <BuzzerOn>:
//-------------------------BUZZER-----------------
void BuzzerOn() {
	SB(PORT_BUZZER,BUZZER);
     4ea:	29 9a       	sbi	0x05, 1	; 5
}
     4ec:	08 95       	ret

000004ee <BuzzerOff>:
void BuzzerOff() {
	CB(PORT_BUZZER,BUZZER);
     4ee:	29 98       	cbi	0x05, 1	; 5
}
     4f0:	08 95       	ret

000004f2 <BuzzerOnOff>:
void BuzzerOnOff() {
	PORT_BUZZER ^= 1<<BUZZER;
     4f2:	85 b1       	in	r24, 0x05	; 5
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	89 27       	eor	r24, r25
     4f8:	85 b9       	out	0x05, r24	; 5
}		
     4fa:	08 95       	ret

000004fc <InitPortsBuzzer>:
void InitPortsBuzzer() {
	SB(DDR_BUZZER,BUZZER);
     4fc:	21 9a       	sbi	0x04, 1	; 4
	CB(PORT_BUZZER,BUZZER);
     4fe:	29 98       	cbi	0x05, 1	; 5
}
     500:	08 95       	ret

00000502 <BuzzerSound>:
//--
void BuzzerSound() {
volatile static u08 step=10;
	if(allow_buzzer==ON) {
     502:	80 91 14 01 	lds	r24, 0x0114
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	41 f5       	brne	.+80     	; 0x55a <BuzzerSound+0x58>
		switch(step) {
     50a:	80 91 05 01 	lds	r24, 0x0105
     50e:	84 31       	cpi	r24, 0x14	; 20
     510:	59 f0       	breq	.+22     	; 0x528 <BuzzerSound+0x26>
     512:	8e 31       	cpi	r24, 0x1E	; 30
     514:	b9 f0       	breq	.+46     	; 0x544 <BuzzerSound+0x42>
     516:	8a 30       	cpi	r24, 0x0A	; 10
     518:	41 f5       	brne	.+80     	; 0x56a <BuzzerSound+0x68>
			case 10:
				StartGTimer(timer_buzzer,800);
     51a:	8b e0       	ldi	r24, 0x0B	; 11
     51c:	60 e2       	ldi	r22, 0x20	; 32
     51e:	73 e0       	ldi	r23, 0x03	; 3
     520:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
				step=20;
     524:	84 e1       	ldi	r24, 0x14	; 20
     526:	16 c0       	rjmp	.+44     	; 0x554 <BuzzerSound+0x52>
			break;
			case 20:		
				if(ExpGTimer(timer_buzzer)) {
     528:	8b e0       	ldi	r24, 0x0B	; 11
     52a:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     52e:	88 23       	and	r24, r24
     530:	e1 f0       	breq	.+56     	; 0x56a <BuzzerSound+0x68>
					BuzzerOn();
     532:	0e 94 75 02 	call	0x4ea	; 0x4ea <BuzzerOn>
					StartGTimer(timer_buzzer,150);
     536:	8b e0       	ldi	r24, 0x0B	; 11
     538:	66 e9       	ldi	r22, 0x96	; 150
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
					step=30;
     540:	8e e1       	ldi	r24, 0x1E	; 30
     542:	08 c0       	rjmp	.+16     	; 0x554 <BuzzerSound+0x52>
				}
			break;
			case 30:
				if(ExpGTimer(timer_buzzer)) {
     544:	8b e0       	ldi	r24, 0x0B	; 11
     546:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     54a:	88 23       	and	r24, r24
     54c:	71 f0       	breq	.+28     	; 0x56a <BuzzerSound+0x68>
					BuzzerOff();
     54e:	0e 94 77 02 	call	0x4ee	; 0x4ee <BuzzerOff>
					step=10;
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	80 93 05 01 	sts	0x0105, r24
     558:	08 95       	ret
				}				
			break;				
		}		
	}
	else {
		BuzzerOff();
     55a:	0e 94 77 02 	call	0x4ee	; 0x4ee <BuzzerOff>
		StopGTimer(timer_buzzer);
     55e:	8b e0       	ldi	r24, 0x0B	; 11
     560:	0e 94 3b 07 	call	0xe76	; 0xe76 <StopGTimer>
		step=10;
     564:	8a e0       	ldi	r24, 0x0A	; 10
     566:	80 93 05 01 	sts	0x0105, r24
     56a:	08 95       	ret

0000056c <ReadingDataFromEeprom>:
	}		
}

//------------------------------------------------
//--------------------------------------------------
void ReadingDataFromEeprom(){
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
	ReadEeprom_x16 (ADR_T_MIN,&tmp);
     570:	c5 e1       	ldi	r28, 0x15	; 21
     572:	d1 e0       	ldi	r29, 0x01	; 1
     574:	84 e6       	ldi	r24, 0x64	; 100
     576:	be 01       	movw	r22, r28
     578:	0e 94 68 04 	call	0x8d0	; 0x8d0 <ReadEeprom_x16>
		t_min=tmp;	
     57c:	80 91 15 01 	lds	r24, 0x0115
     580:	90 91 16 01 	lds	r25, 0x0116
     584:	90 93 02 01 	sts	0x0102, r25
     588:	80 93 01 01 	sts	0x0101, r24
	ReadEeprom_x16 (ADR_T_MAX,&tmp);
     58c:	88 ec       	ldi	r24, 0xC8	; 200
     58e:	be 01       	movw	r22, r28
     590:	0e 94 68 04 	call	0x8d0	; 0x8d0 <ReadEeprom_x16>
		t_max=tmp;	
     594:	80 91 15 01 	lds	r24, 0x0115
     598:	90 91 16 01 	lds	r25, 0x0116
     59c:	90 93 04 01 	sts	0x0104, r25
     5a0:	80 93 03 01 	sts	0x0103, r24
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <minus>:
//----------------------------------
//----------------------------ДИНАМИЧЕСКАЯ ИНДИКАЦИЯ----------------------------------------------------------
void minus() {
volatile static u08 step=0;
volatile static u08 timer=0;
	timer++;
     5aa:	80 91 1c 01 	lds	r24, 0x011C
     5ae:	8f 5f       	subi	r24, 0xFF	; 255
     5b0:	80 93 1c 01 	sts	0x011C, r24
	if (timer==20) {
     5b4:	80 91 1c 01 	lds	r24, 0x011C
     5b8:	84 31       	cpi	r24, 0x14	; 20
     5ba:	69 f4       	brne	.+26     	; 0x5d6 <minus+0x2c>
		timer=0;
     5bc:	10 92 1c 01 	sts	0x011C, r1
		step++;
     5c0:	80 91 1d 01 	lds	r24, 0x011D
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	80 93 1d 01 	sts	0x011D, r24
		if(step==2)
     5ca:	80 91 1d 01 	lds	r24, 0x011D
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <minus+0x2c>
			step=0;
     5d2:	10 92 1d 01 	sts	0x011D, r1
	}			
	switch (step) {
     5d6:	80 91 1d 01 	lds	r24, 0x011D
     5da:	88 23       	and	r24, r24
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <minus+0x3a>
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	21 f4       	brne	.+8      	; 0x5ea <minus+0x40>
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <minus+0x3e>
		case 0:
			SB(port_dp,bit_dp);
     5e4:	41 9a       	sbi	0x08, 1	; 8
		break;
     5e6:	08 95       	ret
		case 1:
			CB(port_dp,bit_dp);
     5e8:	41 98       	cbi	0x08, 1	; 8
     5ea:	08 95       	ret

000005ec <segm_set>:
	   		crazr=2;
		break;
	}
}
void segm_set(){
switch (segm){
     5ec:	80 91 45 01 	lds	r24, 0x0145
     5f0:	87 30       	cpi	r24, 0x07	; 7
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <segm_set+0xa>
     5f4:	4e c0       	rjmp	.+156    	; 0x692 <segm_set+0xa6>
     5f6:	88 30       	cpi	r24, 0x08	; 8
     5f8:	70 f4       	brcc	.+28     	; 0x616 <segm_set+0x2a>
     5fa:	83 30       	cpi	r24, 0x03	; 3
     5fc:	c9 f1       	breq	.+114    	; 0x670 <segm_set+0x84>
     5fe:	84 30       	cpi	r24, 0x04	; 4
     600:	28 f4       	brcc	.+10     	; 0x60c <segm_set+0x20>
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	69 f1       	breq	.+90     	; 0x660 <segm_set+0x74>
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	68 f5       	brcc	.+90     	; 0x664 <segm_set+0x78>
     60a:	23 c0       	rjmp	.+70     	; 0x652 <segm_set+0x66>
     60c:	85 30       	cpi	r24, 0x05	; 5
     60e:	d9 f1       	breq	.+118    	; 0x686 <segm_set+0x9a>
     610:	86 30       	cpi	r24, 0x06	; 6
     612:	e0 f5       	brcc	.+120    	; 0x68c <segm_set+0xa0>
     614:	34 c0       	rjmp	.+104    	; 0x67e <segm_set+0x92>
     616:	83 33       	cpi	r24, 0x33	; 51
     618:	09 f4       	brne	.+2      	; 0x61c <segm_set+0x30>
     61a:	49 c0       	rjmp	.+146    	; 0x6ae <segm_set+0xc2>
     61c:	84 33       	cpi	r24, 0x34	; 52
     61e:	48 f4       	brcc	.+18     	; 0x632 <segm_set+0x46>
     620:	89 30       	cpi	r24, 0x09	; 9
     622:	09 f4       	brne	.+2      	; 0x626 <segm_set+0x3a>
     624:	3f c0       	rjmp	.+126    	; 0x6a4 <segm_set+0xb8>
     626:	89 30       	cpi	r24, 0x09	; 9
     628:	c0 f1       	brcs	.+112    	; 0x69a <segm_set+0xae>
     62a:	8a 30       	cpi	r24, 0x0A	; 10
     62c:	09 f0       	breq	.+2      	; 0x630 <segm_set+0x44>
     62e:	61 c0       	rjmp	.+194    	; 0x6f2 <segm_set+0x106>
     630:	3e c0       	rjmp	.+124    	; 0x6ae <segm_set+0xc2>
     632:	85 36       	cpi	r24, 0x65	; 101
     634:	09 f4       	brne	.+2      	; 0x638 <segm_set+0x4c>
     636:	48 c0       	rjmp	.+144    	; 0x6c8 <segm_set+0xdc>
     638:	86 36       	cpi	r24, 0x66	; 102
     63a:	20 f4       	brcc	.+8      	; 0x644 <segm_set+0x58>
     63c:	84 36       	cpi	r24, 0x64	; 100
     63e:	09 f0       	breq	.+2      	; 0x642 <segm_set+0x56>
     640:	58 c0       	rjmp	.+176    	; 0x6f2 <segm_set+0x106>
     642:	3a c0       	rjmp	.+116    	; 0x6b8 <segm_set+0xcc>
     644:	86 36       	cpi	r24, 0x66	; 102
     646:	09 f4       	brne	.+2      	; 0x64a <segm_set+0x5e>
     648:	45 c0       	rjmp	.+138    	; 0x6d4 <segm_set+0xe8>
     64a:	87 36       	cpi	r24, 0x67	; 103
     64c:	09 f0       	breq	.+2      	; 0x650 <segm_set+0x64>
     64e:	51 c0       	rjmp	.+162    	; 0x6f2 <segm_set+0x106>
     650:	49 c0       	rjmp	.+146    	; 0x6e4 <segm_set+0xf8>
	case 0:
		SB(port_s_a,bit_s_a);
     652:	2b 9a       	sbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     654:	2c 9a       	sbi	0x05, 4	; 5
		SB(port_s_c,bit_s_c);
     656:	40 9a       	sbi	0x08, 0	; 8
		SB(port_s_d,bit_s_d);
     658:	42 9a       	sbi	0x08, 2	; 8
		SB(port_s_e,bit_s_e);
     65a:	43 9a       	sbi	0x08, 3	; 8
		SB(port_s_f,bit_s_f);
     65c:	2a 9a       	sbi	0x05, 2	; 5
     65e:	32 c0       	rjmp	.+100    	; 0x6c4 <segm_set+0xd8>
		CB(port_s_g,bit_s_g);
		break;
	case 1:
		CB(port_s_a,bit_s_a);
     660:	2b 98       	cbi	0x05, 3	; 5
     662:	18 c0       	rjmp	.+48     	; 0x694 <segm_set+0xa8>
		CB(port_s_e,bit_s_e);
		CB(port_s_f,bit_s_f);
		CB(port_s_g,bit_s_g);
		break;
	case 2:
		SB(port_s_a,bit_s_a);
     664:	2b 9a       	sbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     666:	2c 9a       	sbi	0x05, 4	; 5
		CB(port_s_c,bit_s_c);
     668:	40 98       	cbi	0x08, 0	; 8
		SB(port_s_d,bit_s_d);
     66a:	42 9a       	sbi	0x08, 2	; 8
		SB(port_s_e,bit_s_e);
     66c:	43 9a       	sbi	0x08, 3	; 8
     66e:	05 c0       	rjmp	.+10     	; 0x67a <segm_set+0x8e>
		CB(port_s_f,bit_s_f);
		SB(port_s_g,bit_s_g);
		break;
	case 3:
		SB(port_s_a,bit_s_a);
     670:	2b 9a       	sbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     672:	2c 9a       	sbi	0x05, 4	; 5
		SB(port_s_c,bit_s_c);
     674:	40 9a       	sbi	0x08, 0	; 8
		SB(port_s_d,bit_s_d);
     676:	42 9a       	sbi	0x08, 2	; 8
		CB(port_s_e,bit_s_e);
     678:	43 98       	cbi	0x08, 3	; 8
		CB(port_s_f,bit_s_f);
     67a:	2a 98       	cbi	0x05, 2	; 5
     67c:	31 c0       	rjmp	.+98     	; 0x6e0 <segm_set+0xf4>
		SB(port_s_g,bit_s_g);
		break;
	case 4:
		CB(port_s_a,bit_s_a);
     67e:	2b 98       	cbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     680:	2c 9a       	sbi	0x05, 4	; 5
		SB(port_s_c,bit_s_c);
     682:	40 9a       	sbi	0x08, 0	; 8
     684:	2a c0       	rjmp	.+84     	; 0x6da <segm_set+0xee>
		CB(port_s_e,bit_s_e);
		SB(port_s_f,bit_s_f);
		SB(port_s_g,bit_s_g);
		break;
	case 5:
		SB(port_s_a,bit_s_a);
     686:	2b 9a       	sbi	0x05, 3	; 5
		CB(port_s_b,bit_s_b);
     688:	2c 98       	cbi	0x05, 4	; 5
     68a:	0e c0       	rjmp	.+28     	; 0x6a8 <segm_set+0xbc>
		CB(port_s_e,bit_s_e);
		SB(port_s_f,bit_s_f);
		SB(port_s_g,bit_s_g);
		break;
	case 6:
		SB(port_s_a,bit_s_a);
     68c:	2b 9a       	sbi	0x05, 3	; 5
		CB(port_s_b,bit_s_b);
     68e:	2c 98       	cbi	0x05, 4	; 5
     690:	06 c0       	rjmp	.+12     	; 0x69e <segm_set+0xb2>
		SB(port_s_e,bit_s_e);
		SB(port_s_f,bit_s_f);
		SB(port_s_g,bit_s_g);
		break;
	case 7:
		SB(port_s_a,bit_s_a);
     692:	2b 9a       	sbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     694:	2c 9a       	sbi	0x05, 4	; 5
		SB(port_s_c,bit_s_c);
     696:	40 9a       	sbi	0x08, 0	; 8
     698:	12 c0       	rjmp	.+36     	; 0x6be <segm_set+0xd2>
		CB(port_s_e,bit_s_e);
		CB(port_s_f,bit_s_f);
		CB(port_s_g,bit_s_g);
		break;
	case 8:
		SB(port_s_a,bit_s_a);
     69a:	2b 9a       	sbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     69c:	2c 9a       	sbi	0x05, 4	; 5
		SB(port_s_c,bit_s_c);
     69e:	40 9a       	sbi	0x08, 0	; 8
		SB(port_s_d,bit_s_d);
     6a0:	42 9a       	sbi	0x08, 2	; 8
     6a2:	16 c0       	rjmp	.+44     	; 0x6d0 <segm_set+0xe4>
		SB(port_s_e,bit_s_e);
		SB(port_s_f,bit_s_f);
		SB(port_s_g,bit_s_g);
		break;
	case 9:
		SB(port_s_a,bit_s_a);
     6a4:	2b 9a       	sbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     6a6:	2c 9a       	sbi	0x05, 4	; 5
		SB(port_s_c,bit_s_c);
     6a8:	40 9a       	sbi	0x08, 0	; 8
		SB(port_s_d,bit_s_d);
     6aa:	42 9a       	sbi	0x08, 2	; 8
     6ac:	17 c0       	rjmp	.+46     	; 0x6dc <segm_set+0xf0>
		CB(port_s_f,bit_s_f);
		SB(port_s_g,bit_s_g);
		break;

	case 51:
		CB(port_s_a,bit_s_a);
     6ae:	2b 98       	cbi	0x05, 3	; 5
		CB(port_s_b,bit_s_b);
     6b0:	2c 98       	cbi	0x05, 4	; 5
		CB(port_s_c,bit_s_c);
     6b2:	40 98       	cbi	0x08, 0	; 8
		CB(port_s_d,bit_s_d);
     6b4:	42 98       	cbi	0x08, 2	; 8
     6b6:	e0 cf       	rjmp	.-64     	; 0x678 <segm_set+0x8c>
		CB(port_s_e,bit_s_e);
		CB(port_s_f,bit_s_f);
		SB(port_s_g,bit_s_g);
		break;
	case 100:
		CB(port_s_a,bit_s_a);
     6b8:	2b 98       	cbi	0x05, 3	; 5
		CB(port_s_b,bit_s_b);
     6ba:	2c 98       	cbi	0x05, 4	; 5
		CB(port_s_c,bit_s_c);
     6bc:	40 98       	cbi	0x08, 0	; 8
		CB(port_s_d,bit_s_d);
     6be:	42 98       	cbi	0x08, 2	; 8
		CB(port_s_e,bit_s_e);
     6c0:	43 98       	cbi	0x08, 3	; 8
		CB(port_s_f,bit_s_f);
     6c2:	2a 98       	cbi	0x05, 2	; 5
		CB(port_s_g,bit_s_g);
     6c4:	2d 98       	cbi	0x05, 5	; 5
		break;
     6c6:	08 95       	ret
	case 101:
		CB(port_s_a,bit_s_a);
     6c8:	2b 98       	cbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     6ca:	2c 9a       	sbi	0x05, 4	; 5
		SB(port_s_c,bit_s_c);
     6cc:	40 9a       	sbi	0x08, 0	; 8
		CB(port_s_d,bit_s_d);
     6ce:	42 98       	cbi	0x08, 2	; 8
		SB(port_s_e,bit_s_e);
     6d0:	43 9a       	sbi	0x08, 3	; 8
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <segm_set+0xf2>
		SB(port_s_f,bit_s_f);
		SB(port_s_g,bit_s_g);
		break;
	case 102:
		SB(port_s_a,bit_s_a);
     6d4:	2b 9a       	sbi	0x05, 3	; 5
		SB(port_s_b,bit_s_b);
     6d6:	2c 9a       	sbi	0x05, 4	; 5
		CB(port_s_c,bit_s_c);
     6d8:	40 98       	cbi	0x08, 0	; 8
		CB(port_s_d,bit_s_d);
     6da:	42 98       	cbi	0x08, 2	; 8
		CB(port_s_e,bit_s_e);
     6dc:	43 98       	cbi	0x08, 3	; 8
		SB(port_s_f,bit_s_f);
     6de:	2a 9a       	sbi	0x05, 2	; 5
		SB(port_s_g,bit_s_g);
     6e0:	2d 9a       	sbi	0x05, 5	; 5
		break;
     6e2:	08 95       	ret
	case 103:
		SB(port_s_a,bit_s_a);
     6e4:	2b 9a       	sbi	0x05, 3	; 5
		CB(port_s_b,bit_s_b);
     6e6:	2c 98       	cbi	0x05, 4	; 5
		CB(port_s_c,bit_s_c);
     6e8:	40 98       	cbi	0x08, 0	; 8
		SB(port_s_d,bit_s_d);
     6ea:	42 9a       	sbi	0x08, 2	; 8
		SB(port_s_e,bit_s_e);
     6ec:	43 9a       	sbi	0x08, 3	; 8
		SB(port_s_f,bit_s_f);
     6ee:	2a 9a       	sbi	0x05, 2	; 5
		CB(port_s_g,bit_s_g);
     6f0:	2d 98       	cbi	0x05, 5	; 5
     6f2:	08 95       	ret

000006f4 <di>:
			CB(port_dp,bit_dp);
		break;
	}//sw
}//v
//--------------------------------------
void di(volatile s16 digit) {
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <di+0x6>
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01
volatile static u08 crazr=2;
volatile static u08 tmp;
volatile static s16 dig;
	
		if (digit<0)
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	97 ff       	sbrs	r25, 7
     708:	06 c0       	rjmp	.+12     	; 0x716 <di+0x22>
			dig=-digit;			
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	9a 81       	ldd	r25, Y+2	; 0x02
     70e:	90 95       	com	r25
     710:	81 95       	neg	r24
     712:	9f 4f       	sbci	r25, 0xFF	; 255
     714:	02 c0       	rjmp	.+4      	; 0x71a <di+0x26>
		else 
			dig=digit;			
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	90 93 1a 01 	sts	0x011A, r25
     71e:	80 93 19 01 	sts	0x0119, r24
		tmp=dig/10;
     722:	80 91 19 01 	lds	r24, 0x0119
     726:	90 91 1a 01 	lds	r25, 0x011A
     72a:	2a e0       	ldi	r18, 0x0A	; 10
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	b9 01       	movw	r22, r18
     730:	0e 94 19 0a 	call	0x1432	; 0x1432 <__divmodhi4>
     734:	60 93 1b 01 	sts	0x011B, r22
		d0r=dig%10;
     738:	80 91 19 01 	lds	r24, 0x0119
     73c:	90 91 1a 01 	lds	r25, 0x011A
     740:	b9 01       	movw	r22, r18
     742:	0e 94 19 0a 	call	0x1432	; 0x1432 <__divmodhi4>
     746:	80 93 47 01 	sts	0x0147, r24
		d1r=tmp%10;
     74a:	80 91 1b 01 	lds	r24, 0x011B
     74e:	2a e0       	ldi	r18, 0x0A	; 10
     750:	62 2f       	mov	r22, r18
     752:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__udivmodqi4>
     756:	90 93 44 01 	sts	0x0144, r25
		d2r=tmp/10;
     75a:	80 91 1b 01 	lds	r24, 0x011B
     75e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__udivmodqi4>
     762:	80 93 48 01 	sts	0x0148, r24

	if (digit==12345) {		
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	20 e3       	ldi	r18, 0x30	; 48
     76c:	89 33       	cpi	r24, 0x39	; 57
     76e:	92 07       	cpc	r25, r18
     770:	39 f4       	brne	.+14     	; 0x780 <di+0x8c>
			d0r=51;
     772:	83 e3       	ldi	r24, 0x33	; 51
     774:	80 93 47 01 	sts	0x0147, r24
			d1r=51;
     778:	80 93 44 01 	sts	0x0144, r24
			d2r=51;		
     77c:	80 93 48 01 	sts	0x0148, r24
	}

	switch (crazr){
     780:	80 91 06 01 	lds	r24, 0x0106
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	01 f1       	breq	.+64     	; 0x7c8 <di+0xd4>
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	08 f4       	brcc	.+2      	; 0x78e <di+0x9a>
     78c:	41 c0       	rjmp	.+130    	; 0x810 <di+0x11c>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	09 f0       	breq	.+2      	; 0x794 <di+0xa0>
     792:	4b c0       	rjmp	.+150    	; 0x82a <di+0x136>
		case 2: 				//старший разряд
		   if ((d2r==0)&&((work_mode!=SET_MIN)||(work_mode!=SET_MAX)))		//выключение нуля
     794:	80 91 48 01 	lds	r24, 0x0148
     798:	88 23       	and	r24, r24
     79a:	51 f4       	brne	.+20     	; 0x7b0 <di+0xbc>
     79c:	80 91 12 01 	lds	r24, 0x0112
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	21 f4       	brne	.+8      	; 0x7ac <di+0xb8>
     7a4:	80 91 12 01 	lds	r24, 0x0112
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	11 f0       	breq	.+4      	; 0x7b0 <di+0xbc>
		   	    SB(port_r_2,bit_r_2);
     7ac:	44 9a       	sbi	0x08, 4	; 8
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <di+0xbe>
   			else
				CB(port_r_2,bit_r_2);				
     7b0:	44 98       	cbi	0x08, 4	; 8
	   		SB(port_r_1,bit_r_1);
     7b2:	5d 9a       	sbi	0x0b, 5	; 11
	   		SB(port_r_0,bit_r_0);
     7b4:	5e 9a       	sbi	0x0b, 6	; 11

//			if(work_mode!=WORK)
				CB(port_dp,bit_dp);
     7b6:	41 98       	cbi	0x08, 1	; 8
//			else
//				SB(port_dp,bit_dp);

			segm=d2r;
     7b8:	80 91 48 01 	lds	r24, 0x0148
     7bc:	80 93 45 01 	sts	0x0145, r24
	   		segm_set();
     7c0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <segm_set>
	   		crazr=1;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	2f c0       	rjmp	.+94     	; 0x826 <di+0x132>
 		break;

		case 1:				//средний разряд
	   		SB(port_r_2,bit_r_2);
     7c8:	44 9a       	sbi	0x08, 4	; 8
	   		SB(port_r_0,bit_r_0);
     7ca:	5e 9a       	sbi	0x0b, 6	; 11

//			if ( (d2r==0)&&(d1r==0)&&(display_mode!=TEMP))//выключение нуля
//				SB(port_r_1,bit_r_1);
//			else
	   			CB(port_r_1,bit_r_1);
     7cc:	5d 98       	cbi	0x0b, 5	; 11

			
			if (((work_mode==WORK)||(work_mode==ALARM))&&(display_mode==TEMP)){
     7ce:	80 91 12 01 	lds	r24, 0x0112
     7d2:	88 23       	and	r24, r24
     7d4:	21 f0       	breq	.+8      	; 0x7de <di+0xea>
     7d6:	80 91 12 01 	lds	r24, 0x0112
     7da:	83 30       	cpi	r24, 0x03	; 3
     7dc:	79 f4       	brne	.+30     	; 0x7fc <di+0x108>
     7de:	80 91 18 01 	lds	r24, 0x0118
     7e2:	88 23       	and	r24, r24
     7e4:	59 f4       	brne	.+22     	; 0x7fc <di+0x108>
	 			if (digit>=0)
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	97 ff       	sbrs	r25, 7
					SB(port_dp,bit_dp);
     7ec:	41 9a       	sbi	0x08, 1	; 8
				if (digit<0)
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	97 ff       	sbrs	r25, 7
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <di+0x10a>
					minus();								
     7f6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <minus>
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <di+0x10a>
			}
			else	
				CB(port_dp,bit_dp);			
     7fc:	41 98       	cbi	0x08, 1	; 8

	   		segm=d1r;
     7fe:	80 91 44 01 	lds	r24, 0x0144
     802:	80 93 45 01 	sts	0x0145, r24
	   		segm_set();
     806:	0e 94 f6 02 	call	0x5ec	; 0x5ec <segm_set>
	   		crazr=0;
     80a:	10 92 06 01 	sts	0x0106, r1
	 	break;	
     80e:	0d c0       	rjmp	.+26     	; 0x82a <di+0x136>
		
		case 0:					// Младший разряд			
	   		SB(port_r_2,bit_r_2);
     810:	44 9a       	sbi	0x08, 4	; 8
	   		SB(port_r_1,bit_r_1);
     812:	5d 9a       	sbi	0x0b, 5	; 11
	   		CB(port_r_0,bit_r_0);
     814:	5e 98       	cbi	0x0b, 6	; 11
			CB(port_dp,bit_dp);
     816:	41 98       	cbi	0x08, 1	; 8

	   		segm=d0r;
     818:	80 91 47 01 	lds	r24, 0x0147
     81c:	80 93 45 01 	sts	0x0145, r24
	   		segm_set();
     820:	0e 94 f6 02 	call	0x5ec	; 0x5ec <segm_set>
	   		crazr=2;
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	80 93 06 01 	sts	0x0106, r24
		break;
	}
}
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	cf 91       	pop	r28
     830:	df 91       	pop	r29
     832:	08 95       	ret

00000834 <InitPortsDI>:

}
}
//-------------------------------
void InitPortsDI() {
SB(ddr_s_a,bit_s_a);
     834:	23 9a       	sbi	0x04, 3	; 4
SB(ddr_s_b,bit_s_b);
     836:	24 9a       	sbi	0x04, 4	; 4
SB(ddr_s_c,bit_s_c);
     838:	38 9a       	sbi	0x07, 0	; 7
SB(ddr_s_d,bit_s_d);
     83a:	3a 9a       	sbi	0x07, 2	; 7
SB(ddr_s_e,bit_s_e);
     83c:	3b 9a       	sbi	0x07, 3	; 7
SB(ddr_s_f,bit_s_f);
     83e:	22 9a       	sbi	0x04, 2	; 4
SB(ddr_s_g,bit_s_g);
     840:	25 9a       	sbi	0x04, 5	; 4
SB(ddr_dp,bit_dp);
     842:	39 9a       	sbi	0x07, 1	; 7
SB(ddr_r_0,bit_r_0);
     844:	56 9a       	sbi	0x0a, 6	; 10
SB(ddr_r_1,bit_r_1);
     846:	55 9a       	sbi	0x0a, 5	; 10
SB(ddr_r_2,bit_r_2);
     848:	3c 9a       	sbi	0x07, 4	; 7
}
     84a:	08 95       	ret

0000084c <__vector_22>:
s08  *parray_x8;
s16 *parray_x16;
s32 *parray_x32;
u08 num_elements;
//--------------------------------------
ISR (EE_READY_vect) {
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
volatile static uint8_t step=0,bit0=0,bit1=0;
switch (what_write) {
     860:	80 91 49 01 	lds	r24, 0x0149
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	51 f5       	brne	.+84     	; 0x8bc <__vector_22+0x70>
	case BYTE_X16:
		switch (step) {
     868:	90 91 20 01 	lds	r25, 0x0120
     86c:	99 23       	and	r25, r25
     86e:	19 f0       	breq	.+6      	; 0x876 <__vector_22+0x2a>
     870:	91 30       	cpi	r25, 0x01	; 1
     872:	21 f5       	brne	.+72     	; 0x8bc <__vector_22+0x70>
     874:	18 c0       	rjmp	.+48     	; 0x8a6 <__vector_22+0x5a>
			case 0:
				bit1=(*pdata_x16)>>8;
     876:	e0 91 50 01 	lds	r30, 0x0150
     87a:	f0 91 51 01 	lds	r31, 0x0151
     87e:	90 81       	ld	r25, Z
     880:	21 81       	ldd	r18, Z+1	; 0x01
     882:	20 93 1e 01 	sts	0x011E, r18
				bit0=*pdata_x16;
     886:	90 93 1f 01 	sts	0x011F, r25
				EEARL=address++;												
     88a:	90 91 4c 01 	lds	r25, 0x014C
     88e:	91 bd       	out	0x21, r25	; 33
     890:	9f 5f       	subi	r25, 0xFF	; 255
     892:	90 93 4c 01 	sts	0x014C, r25
				EEDR=bit1;				
     896:	90 91 1e 01 	lds	r25, 0x011E
     89a:	90 bd       	out	0x20, r25	; 32
				EECR |= (1<<EEMPE);
     89c:	fa 9a       	sbi	0x1f, 2	; 31
				EECR |= (1<<EEPE);
     89e:	f9 9a       	sbi	0x1f, 1	; 31
				step=1;			
     8a0:	80 93 20 01 	sts	0x0120, r24
			break;		
     8a4:	0b c0       	rjmp	.+22     	; 0x8bc <__vector_22+0x70>
			case 1:
				EEARL=address;								
     8a6:	80 91 4c 01 	lds	r24, 0x014C
     8aa:	81 bd       	out	0x21, r24	; 33
				EEDR=bit0;				
     8ac:	80 91 1f 01 	lds	r24, 0x011F
     8b0:	80 bd       	out	0x20, r24	; 32
				EECR |= (1<<EEMPE);
     8b2:	fa 9a       	sbi	0x1f, 2	; 31
				EECR |= (1<<EEPE);
     8b4:	f9 9a       	sbi	0x1f, 1	; 31
				EECR &= ~(1<<EERIE);		
     8b6:	fb 98       	cbi	0x1f, 3	; 31
				step=0;			
     8b8:	10 92 20 01 	sts	0x0120, r1
			break;	
		}		
	break;
	}//sw	
}//ISR			
     8bc:	ff 91       	pop	r31
     8be:	ef 91       	pop	r30
     8c0:	9f 91       	pop	r25
     8c2:	8f 91       	pop	r24
     8c4:	2f 91       	pop	r18
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <ReadEeprom_x16>:
//---------------------------------------
void ReadEeprom_x16 (u08 adress,uint16_t *pdatafromeep) {
     8d0:	fb 01       	movw	r30, r22
	EEARL=adress++;
     8d2:	81 bd       	out	0x21, r24	; 33
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
	EECR |= (1<<EERE);
     8d6:	f8 9a       	sbi	0x1f, 0	; 31
	*pdatafromeep=EEDR<<8;
     8d8:	90 b5       	in	r25, 0x20	; 32
     8da:	10 82       	st	Z, r1
     8dc:	91 83       	std	Z+1, r25	; 0x01
	EEARL=adress;
     8de:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE);
     8e0:	f8 9a       	sbi	0x1f, 0	; 31
	*pdatafromeep+=EEDR;
     8e2:	20 b5       	in	r18, 0x20	; 32
     8e4:	80 81       	ld	r24, Z
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	82 0f       	add	r24, r18
     8ea:	91 1d       	adc	r25, r1
     8ec:	91 83       	std	Z+1, r25	; 0x01
     8ee:	80 83       	st	Z, r24
}
     8f0:	08 95       	ret

000008f2 <WriteEeprom_x16>:
//---------------------------------------
void WriteEeprom_x16 (u08 adress,uint16_t *pdata2write) {
	while(EECR & (1<<EEPE));
     8f2:	f9 99       	sbic	0x1f, 1	; 31
     8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <WriteEeprom_x16>
	what_write=BYTE_X16;
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	90 93 49 01 	sts	0x0149, r25
	address=adress;
     8fc:	80 93 4c 01 	sts	0x014C, r24
	pdata_x16=pdata2write;
     900:	70 93 51 01 	sts	0x0151, r23
     904:	60 93 50 01 	sts	0x0150, r22
	EECR |= (1<<EERIE);
     908:	fb 9a       	sbi	0x1f, 3	; 31
}
     90a:	08 95       	ret

0000090c <NasosHotWaterOn>:
		break;					
	}
}
//---------------------------------------------
void NasosHotWaterOn() {
	CB(PORT_NASOS_HOT_WATER,NASOS_HOT_WATER);
     90c:	5f 98       	cbi	0x0b, 7	; 11
//	LedRedOn();
}
     90e:	08 95       	ret

00000910 <NasosHotWaterOff>:
//---------------------------------------------
void NasosHotWaterOff() {
	SB(PORT_NASOS_HOT_WATER,NASOS_HOT_WATER);
     910:	5f 9a       	sbi	0x0b, 7	; 11
//	LedRedOff();
}
     912:	08 95       	ret

00000914 <HotWater>:
volatile u16 counter_echo=135;
volatile u08 show_distance_on_lcd=OFF;
//---------------------------------------------
void HotWater() {
volatile static u08 step_hw=5;
	switch (step_hw) {	
     914:	80 91 09 01 	lds	r24, 0x0109
     918:	8e 31       	cpi	r24, 0x1E	; 30
     91a:	09 f4       	brne	.+2      	; 0x91e <HotWater+0xa>
     91c:	5d c0       	rjmp	.+186    	; 0x9d8 <HotWater+0xc4>
     91e:	8f 31       	cpi	r24, 0x1F	; 31
     920:	40 f4       	brcc	.+16     	; 0x932 <HotWater+0x1e>
     922:	8a 30       	cpi	r24, 0x0A	; 10
     924:	e1 f0       	breq	.+56     	; 0x95e <HotWater+0x4a>
     926:	84 31       	cpi	r24, 0x14	; 20
     928:	89 f1       	breq	.+98     	; 0x98c <HotWater+0x78>
     92a:	85 30       	cpi	r24, 0x05	; 5
     92c:	09 f0       	breq	.+2      	; 0x930 <HotWater+0x1c>
     92e:	a3 c0       	rjmp	.+326    	; 0xa76 <HotWater+0x162>
     930:	0a c0       	rjmp	.+20     	; 0x946 <HotWater+0x32>
     932:	82 33       	cpi	r24, 0x32	; 50
     934:	09 f4       	brne	.+2      	; 0x938 <HotWater+0x24>
     936:	71 c0       	rjmp	.+226    	; 0xa1a <HotWater+0x106>
     938:	8c 33       	cpi	r24, 0x3C	; 60
     93a:	09 f4       	brne	.+2      	; 0x93e <HotWater+0x2a>
     93c:	8f c0       	rjmp	.+286    	; 0xa5c <HotWater+0x148>
     93e:	88 32       	cpi	r24, 0x28	; 40
     940:	09 f0       	breq	.+2      	; 0x944 <HotWater+0x30>
     942:	99 c0       	rjmp	.+306    	; 0xa76 <HotWater+0x162>
     944:	55 c0       	rjmp	.+170    	; 0x9f0 <HotWater+0xdc>
		case 5:
			StartGTimer(timer_delay_start_hcsr,1000);
     946:	86 e0       	ldi	r24, 0x06	; 6
     948:	68 ee       	ldi	r22, 0xE8	; 232
     94a:	73 e0       	ldi	r23, 0x03	; 3
     94c:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
			if(ExpGTimer(timer_delay_start_hcsr)) {
     950:	86 e0       	ldi	r24, 0x06	; 6
     952:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     956:	88 23       	and	r24, r24
     958:	09 f4       	brne	.+2      	; 0x95c <HotWater+0x48>
     95a:	8d c0       	rjmp	.+282    	; 0xa76 <HotWater+0x162>
     95c:	31 c0       	rjmp	.+98     	; 0x9c0 <HotWater+0xac>
				step_hw=10;
			}
		break;		
		case 10:		
			if((counter_echo<DIST_MAX)&&(counter_echo>DIST_MIN)) {
     95e:	80 91 07 01 	lds	r24, 0x0107
     962:	90 91 08 01 	lds	r25, 0x0108
     966:	8f 30       	cpi	r24, 0x0F	; 15
     968:	91 05       	cpc	r25, r1
     96a:	08 f0       	brcs	.+2      	; 0x96e <HotWater+0x5a>
     96c:	84 c0       	rjmp	.+264    	; 0xa76 <HotWater+0x162>
     96e:	80 91 07 01 	lds	r24, 0x0107
     972:	90 91 08 01 	lds	r25, 0x0108
     976:	84 30       	cpi	r24, 0x04	; 4
     978:	91 05       	cpc	r25, r1
     97a:	08 f4       	brcc	.+2      	; 0x97e <HotWater+0x6a>
     97c:	7c c0       	rjmp	.+248    	; 0xa76 <HotWater+0x162>
				StartGTimer(timer_hot_water,TIME_ON);
     97e:	87 e0       	ldi	r24, 0x07	; 7
     980:	66 e9       	ldi	r22, 0x96	; 150
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
				step_hw=20;
     988:	84 e1       	ldi	r24, 0x14	; 20
     98a:	65 c0       	rjmp	.+202    	; 0xa56 <HotWater+0x142>
			}		
		break;
		case 20:
			if(ExpGTimer(timer_hot_water)){
     98c:	87 e0       	ldi	r24, 0x07	; 7
     98e:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     992:	88 23       	and	r24, r24
     994:	09 f4       	brne	.+2      	; 0x998 <HotWater+0x84>
     996:	6f c0       	rjmp	.+222    	; 0xa76 <HotWater+0x162>
				if((counter_echo>=DIST_MAX)||(counter_echo<=DIST_MIN)){
     998:	80 91 07 01 	lds	r24, 0x0107
     99c:	90 91 08 01 	lds	r25, 0x0108
     9a0:	8f 30       	cpi	r24, 0x0F	; 15
     9a2:	91 05       	cpc	r25, r1
     9a4:	38 f4       	brcc	.+14     	; 0x9b4 <HotWater+0xa0>
     9a6:	80 91 07 01 	lds	r24, 0x0107
     9aa:	90 91 08 01 	lds	r25, 0x0108
     9ae:	84 30       	cpi	r24, 0x04	; 4
     9b0:	91 05       	cpc	r25, r1
     9b2:	40 f4       	brcc	.+16     	; 0x9c4 <HotWater+0xb0>
					counter_echo=100;
     9b4:	84 e6       	ldi	r24, 0x64	; 100
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	90 93 08 01 	sts	0x0108, r25
     9bc:	80 93 07 01 	sts	0x0107, r24
					step_hw=10;
     9c0:	8a e0       	ldi	r24, 0x0A	; 10
     9c2:	49 c0       	rjmp	.+146    	; 0xa56 <HotWater+0x142>
					return;
				}
				NasosHotWaterOn();	
     9c4:	0e 94 86 04 	call	0x90c	; 0x90c <NasosHotWaterOn>
				counter_echo=100;				
     9c8:	84 e6       	ldi	r24, 0x64	; 100
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	90 93 08 01 	sts	0x0108, r25
     9d0:	80 93 07 01 	sts	0x0107, r24
				step_hw=30;
     9d4:	8e e1       	ldi	r24, 0x1E	; 30
     9d6:	3f c0       	rjmp	.+126    	; 0xa56 <HotWater+0x142>
			}		
		break;
		case 30:
			StartGTimer(timer_hot_water,TIME_PAUSE);
     9d8:	87 e0       	ldi	r24, 0x07	; 7
     9da:	6c ed       	ldi	r22, 0xDC	; 220
     9dc:	75 e0       	ldi	r23, 0x05	; 5
     9de:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
			if(ExpGTimer(timer_hot_water)){
     9e2:	87 e0       	ldi	r24, 0x07	; 7
     9e4:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     9e8:	88 23       	and	r24, r24
     9ea:	09 f4       	brne	.+2      	; 0x9ee <HotWater+0xda>
     9ec:	44 c0       	rjmp	.+136    	; 0xa76 <HotWater+0x162>
     9ee:	28 c0       	rjmp	.+80     	; 0xa40 <HotWater+0x12c>
				step_hw=40;
			}
		break;					
		case 40:			
			if((counter_echo<DIST_MAX)&&(counter_echo>DIST_MIN)) {
     9f0:	80 91 07 01 	lds	r24, 0x0107
     9f4:	90 91 08 01 	lds	r25, 0x0108
     9f8:	8f 30       	cpi	r24, 0x0F	; 15
     9fa:	91 05       	cpc	r25, r1
     9fc:	e0 f5       	brcc	.+120    	; 0xa76 <HotWater+0x162>
     9fe:	80 91 07 01 	lds	r24, 0x0107
     a02:	90 91 08 01 	lds	r25, 0x0108
     a06:	84 30       	cpi	r24, 0x04	; 4
     a08:	91 05       	cpc	r25, r1
     a0a:	a8 f1       	brcs	.+106    	; 0xa76 <HotWater+0x162>
				StartGTimer(timer_hot_water,TIME_OFF);
     a0c:	87 e0       	ldi	r24, 0x07	; 7
     a0e:	66 e9       	ldi	r22, 0x96	; 150
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
				step_hw=50;
     a16:	82 e3       	ldi	r24, 0x32	; 50
     a18:	1e c0       	rjmp	.+60     	; 0xa56 <HotWater+0x142>
			}		
		break;		
		case 50:
			if(ExpGTimer(timer_hot_water)){
     a1a:	87 e0       	ldi	r24, 0x07	; 7
     a1c:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     a20:	88 23       	and	r24, r24
     a22:	49 f1       	breq	.+82     	; 0xa76 <HotWater+0x162>
				if((counter_echo>=DIST_MAX)||(counter_echo<=DIST_MIN)){
     a24:	80 91 07 01 	lds	r24, 0x0107
     a28:	90 91 08 01 	lds	r25, 0x0108
     a2c:	8f 30       	cpi	r24, 0x0F	; 15
     a2e:	91 05       	cpc	r25, r1
     a30:	38 f4       	brcc	.+14     	; 0xa40 <HotWater+0x12c>
     a32:	80 91 07 01 	lds	r24, 0x0107
     a36:	90 91 08 01 	lds	r25, 0x0108
     a3a:	84 30       	cpi	r24, 0x04	; 4
     a3c:	91 05       	cpc	r25, r1
     a3e:	10 f4       	brcc	.+4      	; 0xa44 <HotWater+0x130>
					step_hw=40;
     a40:	88 e2       	ldi	r24, 0x28	; 40
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <HotWater+0x142>
					return;
				}
				NasosHotWaterOff();
     a44:	0e 94 88 04 	call	0x910	; 0x910 <NasosHotWaterOff>
				counter_echo=100;
     a48:	84 e6       	ldi	r24, 0x64	; 100
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	90 93 08 01 	sts	0x0108, r25
     a50:	80 93 07 01 	sts	0x0107, r24
				step_hw=60;					
     a54:	8c e3       	ldi	r24, 0x3C	; 60
     a56:	80 93 09 01 	sts	0x0109, r24
     a5a:	08 95       	ret
			}
		break;
		case 60:
			StartGTimer(timer_hot_water,TIME_PAUSE);
     a5c:	87 e0       	ldi	r24, 0x07	; 7
     a5e:	6c ed       	ldi	r22, 0xDC	; 220
     a60:	75 e0       	ldi	r23, 0x05	; 5
     a62:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
			if(ExpGTimer(timer_hot_water)){
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     a6c:	88 23       	and	r24, r24
     a6e:	19 f0       	breq	.+6      	; 0xa76 <HotWater+0x162>
				step_hw=10;
     a70:	8a e0       	ldi	r24, 0x0A	; 10
     a72:	80 93 09 01 	sts	0x0109, r24
     a76:	08 95       	ret

00000a78 <InitPortsNasosHotWater>:
	SB(PORT_NASOS_HOT_WATER,NASOS_HOT_WATER);
//	LedRedOff();
}
//---------------------------------------------
void InitPortsNasosHotWater() {
	SB(DDR_NASOS_HOT_WATER,NASOS_HOT_WATER);
     a78:	57 9a       	sbi	0x0a, 7	; 10
	NasosHotWaterOff();
     a7a:	0e 94 88 04 	call	0x910	; 0x910 <NasosHotWaterOff>
}
     a7e:	08 95       	ret

00000a80 <__vector_1>:
//---------------------------------------------
ISR (INT0_vect) {
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	5f 93       	push	r21
     a8c:	6f 93       	push	r22
     a8e:	7f 93       	push	r23
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	af 93       	push	r26
     a96:	bf 93       	push	r27
	switch (step_int0) {
     a98:	80 91 21 01 	lds	r24, 0x0121
     a9c:	88 23       	and	r24, r24
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <__vector_1+0x26>
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	69 f5       	brne	.+90     	; 0xafe <__vector_1+0x7e>
     aa4:	0f c0       	rjmp	.+30     	; 0xac4 <__vector_1+0x44>
		case 0:
			TCNT1=0;
     aa6:	10 92 85 00 	sts	0x0085, r1
     aaa:	10 92 84 00 	sts	0x0084, r1
			TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
     aae:	10 92 80 00 	sts	0x0080, r1
			TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10); //8
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	80 93 81 00 	sts	0x0081, r24
			EICRA=(1<<ISC01)|(0<<ISC00);
     ab8:	80 93 69 00 	sts	0x0069, r24
			step_int0=1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 93 21 01 	sts	0x0121, r24

		break;
     ac2:	1d c0       	rjmp	.+58     	; 0xafe <__vector_1+0x7e>
		case 1:
			TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
     ac4:	10 92 80 00 	sts	0x0080, r1
			TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(0<<CS10); //0			
     ac8:	10 92 81 00 	sts	0x0081, r1
			EIMSK=0;
     acc:	1d ba       	out	0x1d, r1	; 29
			counter_echo=TCNT1/58;
     ace:	80 91 84 00 	lds	r24, 0x0084
     ad2:	90 91 85 00 	lds	r25, 0x0085
     ad6:	6a e3       	ldi	r22, 0x3A	; 58
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     ade:	70 93 08 01 	sts	0x0108, r23
     ae2:	60 93 07 01 	sts	0x0107, r22
			if(work_mode==DIST) {
     ae6:	80 91 12 01 	lds	r24, 0x0112
     aea:	84 30       	cpi	r24, 0x04	; 4
     aec:	41 f4       	brne	.+16     	; 0xafe <__vector_1+0x7e>
				data_di=counter_echo;
     aee:	80 91 07 01 	lds	r24, 0x0107
     af2:	90 91 08 01 	lds	r25, 0x0108
     af6:	90 93 11 01 	sts	0x0111, r25
     afa:	80 93 10 01 	sts	0x0110, r24
			}		
		break;
	}
}
     afe:	bf 91       	pop	r27
     b00:	af 91       	pop	r26
     b02:	9f 91       	pop	r25
     b04:	8f 91       	pop	r24
     b06:	7f 91       	pop	r23
     b08:	6f 91       	pop	r22
     b0a:	5f 91       	pop	r21
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <InitPortsTrig>:
//-----------------------------------------
void InitPortsTrig() {
	SB(DDR_TRIG,TRIG);
     b16:	3d 9a       	sbi	0x07, 5	; 7
	CB(PORT_TRIG,TRIG);
     b18:	45 98       	cbi	0x08, 5	; 8
}
     b1a:	08 95       	ret

00000b1c <StartTrig>:
//---------------------------------------------
void StartTrig() {
	StartGTimer(timer_trig,250);
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	6a ef       	ldi	r22, 0xFA	; 250
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
	if(ExpGTimer(timer_trig)) {
     b26:	8a e0       	ldi	r24, 0x0A	; 10
     b28:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
     b2c:	88 23       	and	r24, r24
     b2e:	71 f0       	breq	.+28     	; 0xb4c <StartTrig+0x30>
		step_int0=0;
     b30:	10 92 21 01 	sts	0x0121, r1
		CLI
     b34:	f8 94       	cli
		SB(PORT_TRIG,TRIG);
     b36:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b38:	88 e2       	ldi	r24, 0x28	; 40
     b3a:	8a 95       	dec	r24
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <StartTrig+0x1e>
		_delay_us(15);
		CB(PORT_TRIG,TRIG);		
     b3e:	45 98       	cbi	0x08, 5	; 8
		EIMSK=(1<<INT0);
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	8d bb       	out	0x1d, r24	; 29
		EICRA = (1<<ISC01)|(1<<ISC00);
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	80 93 69 00 	sts	0x0069, r24
		SEI
     b4a:	78 94       	sei
     b4c:	08 95       	ret

00000b4e <__vector_16>:
#include "ISR_timers.h"

ISR (TIMER0_OVF_vect) {
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
}
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <__vector_14>:
//-------------------------
ISR (TIMER0_COMPA_vect) {
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
	SysTick_Handler();
     b84:	0e 94 7d 07 	call	0xefa	; 0xefa <SysTick_Handler>
}
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	7f 91       	pop	r23
     b96:	6f 91       	pop	r22
     b98:	5f 91       	pop	r21
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <__vector_9>:
//-------------------------
ISR (TIMER2_OVF_vect) {	
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1

}
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	0f 90       	pop	r0
     bba:	1f 90       	pop	r1
     bbc:	18 95       	reti

00000bbe <__vector_11>:
//-------------------------
ISR (TIMER1_COMPA_vect) {
     bbe:	1f 92       	push	r1
     bc0:	0f 92       	push	r0
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	0f 92       	push	r0
     bc6:	11 24       	eor	r1, r1
//	PORTB ^= 1<<1;
}
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <ProcessKn1>:
#include "kn1x.h"		//change

//-------------------------------------------
void ProcessKn1(volatile u08 *flag_hold) {	//change
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	ec 01       	movw	r28, r24
volatile static u08 flag_press=OFF;
volatile static u08 flag_long_press=OFF;
volatile static u08 counter=0;
volatile static u16 counter_delay=0;

switch(kn_status) {
     bd8:	20 91 28 01 	lds	r18, 0x0128
     bdc:	22 23       	and	r18, r18
     bde:	21 f0       	breq	.+8      	; 0xbe8 <ProcessKn1+0x16>
     be0:	21 30       	cpi	r18, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <ProcessKn1+0x14>
     be4:	74 c0       	rjmp	.+232    	; 0xcce <ProcessKn1+0xfc>
     be6:	1c c0       	rjmp	.+56     	; 0xc20 <ProcessKn1+0x4e>
	case NOT_PRESSED:

		if(BIS(PIN_KN1,KN1)) {	//change		проверяем нажатие
     be8:	4b 9b       	sbis	0x09, 3	; 9
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <ProcessKn1+0x20>
			counter=0;	//сброс и выход
     bec:	10 92 25 01 	sts	0x0125, r1
			return;
     bf0:	6e c0       	rjmp	.+220    	; 0xcce <ProcessKn1+0xfc>
		}
		else {
			counter++;						
     bf2:	80 91 25 01 	lds	r24, 0x0125
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 25 01 	sts	0x0125, r24
		}		
				
		if(counter<NUMBER_CHECKS_IN) 
     bfc:	80 91 25 01 	lds	r24, 0x0125
     c00:	85 30       	cpi	r24, 0x05	; 5
     c02:	08 f4       	brcc	.+2      	; 0xc06 <ProcessKn1+0x34>
     c04:	64 c0       	rjmp	.+200    	; 0xcce <ProcessKn1+0xfc>
			return;
		else {
			SendMessage(MSG_KN1_FAST_PRESSED);	//change	
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 9b 07 	call	0xf36	; 0xf36 <SendMessage>
			counter=0;
     c0c:	10 92 25 01 	sts	0x0125, r1
			counter_delay=0;
     c10:	10 92 24 01 	sts	0x0124, r1
     c14:	10 92 23 01 	sts	0x0123, r1
			kn_status=PRESSED;
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	80 93 28 01 	sts	0x0128, r24
			return;
     c1e:	57 c0       	rjmp	.+174    	; 0xcce <ProcessKn1+0xfc>
		}
	break;
	case PRESSED:		
		if(BIC(PIN_KN1,KN1)) { //change			проверяем отпускание
     c20:	4b 99       	sbic	0x09, 3	; 9
     c22:	2c c0       	rjmp	.+88     	; 0xc7c <ProcessKn1+0xaa>
			counter=0;
     c24:	10 92 25 01 	sts	0x0125, r1

			counter_delay++;
     c28:	80 91 23 01 	lds	r24, 0x0123
     c2c:	90 91 24 01 	lds	r25, 0x0124
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	90 93 24 01 	sts	0x0124, r25
     c36:	80 93 23 01 	sts	0x0123, r24
			if(counter_delay>DELAY_PRESS) {		
     c3a:	80 91 23 01 	lds	r24, 0x0123
     c3e:	90 91 24 01 	lds	r25, 0x0124
     c42:	86 30       	cpi	r24, 0x06	; 6
     c44:	91 05       	cpc	r25, r1
     c46:	10 f0       	brcs	.+4      	; 0xc4c <ProcessKn1+0x7a>
				flag_press=ON;
     c48:	20 93 27 01 	sts	0x0127, r18
			}

			if(counter_delay>DELAY_LONG_PRESS) {		
     c4c:	80 91 23 01 	lds	r24, 0x0123
     c50:	90 91 24 01 	lds	r25, 0x0124
     c54:	8d 33       	cpi	r24, 0x3D	; 61
     c56:	91 05       	cpc	r25, r1
     c58:	28 f0       	brcs	.+10     	; 0xc64 <ProcessKn1+0x92>
				flag_press=OFF;
     c5a:	10 92 27 01 	sts	0x0127, r1
				flag_long_press=ON;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 26 01 	sts	0x0126, r24
			}		

			if(counter_delay>DELAY_HOLD) {		 
     c64:	80 91 23 01 	lds	r24, 0x0123
     c68:	90 91 24 01 	lds	r25, 0x0124
     c6c:	89 3c       	cpi	r24, 0xC9	; 201
     c6e:	91 05       	cpc	r25, r1
     c70:	70 f1       	brcs	.+92     	; 0xcce <ProcessKn1+0xfc>
				flag_long_press=OFF;
     c72:	10 92 26 01 	sts	0x0126, r1
				*flag_hold=ON;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	88 83       	st	Y, r24
     c7a:	29 c0       	rjmp	.+82     	; 0xcce <ProcessKn1+0xfc>
			}		
			return;			
		}	
		else {
			counter++;
     c7c:	80 91 25 01 	lds	r24, 0x0125
     c80:	8f 5f       	subi	r24, 0xFF	; 255
     c82:	80 93 25 01 	sts	0x0125, r24
			if(counter<NUMBER_CHECKS_OUT) {
     c86:	80 91 25 01 	lds	r24, 0x0125
     c8a:	85 30       	cpi	r24, 0x05	; 5
     c8c:	00 f1       	brcs	.+64     	; 0xcce <ProcessKn1+0xfc>
				return;
			}		
			else {
				if(flag_press==ON) {
     c8e:	80 91 27 01 	lds	r24, 0x0127
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	21 f4       	brne	.+8      	; 0xc9e <ProcessKn1+0xcc>
					flag_press=OFF;
     c96:	10 92 27 01 	sts	0x0127, r1
					SendMessage(MSG_KN1_PRESSED);	//change
     c9a:	0e 94 9b 07 	call	0xf36	; 0xf36 <SendMessage>
				}		

				if(flag_long_press==ON) {
     c9e:	80 91 26 01 	lds	r24, 0x0126
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	29 f4       	brne	.+10     	; 0xcb0 <ProcessKn1+0xde>
					flag_long_press=OFF;
     ca6:	10 92 26 01 	sts	0x0126, r1
					SendMessage(MSG_KN1_LONGPRESSED);	//change
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e 94 9b 07 	call	0xf36	; 0xf36 <SendMessage>
				}		
				if(*flag_hold==ON)
     cb0:	88 81       	ld	r24, Y
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	19 f4       	brne	.+6      	; 0xcbc <ProcessKn1+0xea>
					SendMessage(MSG_KN1_RELEASED);		//change			
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	0e 94 9b 07 	call	0xf36	; 0xf36 <SendMessage>

				*flag_hold=OFF;
     cbc:	18 82       	st	Y, r1
				counter_delay=0;
     cbe:	10 92 24 01 	sts	0x0124, r1
     cc2:	10 92 23 01 	sts	0x0123, r1
				counter=0;
     cc6:	10 92 25 01 	sts	0x0125, r1
				kn_status=NOT_PRESSED;
     cca:	10 92 28 01 	sts	0x0128, r1
				return;
			}
		}
	break;
}//sw	
}//v
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <InitPortsKn1>:
//-----------------------------------------------------------
void InitPortsKn1() {	//change
	DDR_KN1 &= ~(1<<KN1);	//change
     cd4:	53 98       	cbi	0x0a, 3	; 10
	PORT_KN1 |= (1<<KN1);	//change
     cd6:	5b 9a       	sbi	0x0b, 3	; 11
}
     cd8:	08 95       	ret

00000cda <ProcessKn2>:
#include "kn2x.h"		//change

//-------------------------------------------
void ProcessKn2(volatile u08 *flag_hold) {	//change
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ec 01       	movw	r28, r24
volatile static u08 flag_press=OFF;
volatile static u08 flag_long_press=OFF;
volatile static u08 counter=0;
volatile static u16 counter_delay=0;

switch(kn_status) {
     ce0:	20 91 2e 01 	lds	r18, 0x012E
     ce4:	22 23       	and	r18, r18
     ce6:	21 f0       	breq	.+8      	; 0xcf0 <ProcessKn2+0x16>
     ce8:	21 30       	cpi	r18, 0x01	; 1
     cea:	09 f0       	breq	.+2      	; 0xcee <ProcessKn2+0x14>
     cec:	75 c0       	rjmp	.+234    	; 0xdd8 <ProcessKn2+0xfe>
     cee:	1c c0       	rjmp	.+56     	; 0xd28 <ProcessKn2+0x4e>
	case NOT_PRESSED:

		if(BIS(PIN_KN2,KN2)) {	//change		проверяем нажатие
     cf0:	4c 9b       	sbis	0x09, 4	; 9
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <ProcessKn2+0x20>
			counter=0;	//сброс и выход
     cf4:	10 92 2b 01 	sts	0x012B, r1
			return;
     cf8:	6f c0       	rjmp	.+222    	; 0xdd8 <ProcessKn2+0xfe>
		}
		else {
			counter++;						
     cfa:	80 91 2b 01 	lds	r24, 0x012B
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 93 2b 01 	sts	0x012B, r24
		}		
				
		if(counter<NUMBER_CHECKS_IN) 
     d04:	80 91 2b 01 	lds	r24, 0x012B
     d08:	85 30       	cpi	r24, 0x05	; 5
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <ProcessKn2+0x34>
     d0c:	65 c0       	rjmp	.+202    	; 0xdd8 <ProcessKn2+0xfe>
			return;
		else {
			SendMessage(MSG_KN2_FAST_PRESSED);	//change	
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	0e 94 9b 07 	call	0xf36	; 0xf36 <SendMessage>
			counter=0;
     d14:	10 92 2b 01 	sts	0x012B, r1
			counter_delay=0;
     d18:	10 92 2a 01 	sts	0x012A, r1
     d1c:	10 92 29 01 	sts	0x0129, r1
			kn_status=PRESSED;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 93 2e 01 	sts	0x012E, r24
			return;
     d26:	58 c0       	rjmp	.+176    	; 0xdd8 <ProcessKn2+0xfe>
		}
	break;
	case PRESSED:		
		if(BIC(PIN_KN2,KN2)) { //change			проверяем отпускание
     d28:	4c 99       	sbic	0x09, 4	; 9
     d2a:	2c c0       	rjmp	.+88     	; 0xd84 <ProcessKn2+0xaa>
			counter=0;
     d2c:	10 92 2b 01 	sts	0x012B, r1

			counter_delay++;
     d30:	80 91 29 01 	lds	r24, 0x0129
     d34:	90 91 2a 01 	lds	r25, 0x012A
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	90 93 2a 01 	sts	0x012A, r25
     d3e:	80 93 29 01 	sts	0x0129, r24
			if(counter_delay>DELAY_PRESS) {		
     d42:	80 91 29 01 	lds	r24, 0x0129
     d46:	90 91 2a 01 	lds	r25, 0x012A
     d4a:	86 30       	cpi	r24, 0x06	; 6
     d4c:	91 05       	cpc	r25, r1
     d4e:	10 f0       	brcs	.+4      	; 0xd54 <ProcessKn2+0x7a>
				flag_press=ON;
     d50:	20 93 2d 01 	sts	0x012D, r18
			}

			if(counter_delay>DELAY_LONG_PRESS) {		
     d54:	80 91 29 01 	lds	r24, 0x0129
     d58:	90 91 2a 01 	lds	r25, 0x012A
     d5c:	8d 33       	cpi	r24, 0x3D	; 61
     d5e:	91 05       	cpc	r25, r1
     d60:	28 f0       	brcs	.+10     	; 0xd6c <ProcessKn2+0x92>
				flag_press=OFF;
     d62:	10 92 2d 01 	sts	0x012D, r1
				flag_long_press=ON;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	80 93 2c 01 	sts	0x012C, r24
			}		

			if(counter_delay>DELAY_HOLD) {		 
     d6c:	80 91 29 01 	lds	r24, 0x0129
     d70:	90 91 2a 01 	lds	r25, 0x012A
     d74:	89 3c       	cpi	r24, 0xC9	; 201
     d76:	91 05       	cpc	r25, r1
     d78:	78 f1       	brcs	.+94     	; 0xdd8 <ProcessKn2+0xfe>
				flag_long_press=OFF;
     d7a:	10 92 2c 01 	sts	0x012C, r1
				*flag_hold=ON;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	88 83       	st	Y, r24
     d82:	2a c0       	rjmp	.+84     	; 0xdd8 <ProcessKn2+0xfe>
			}		
			return;			
		}	
		else {
			counter++;
     d84:	80 91 2b 01 	lds	r24, 0x012B
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	80 93 2b 01 	sts	0x012B, r24
			if(counter<NUMBER_CHECKS_OUT) {
     d8e:	80 91 2b 01 	lds	r24, 0x012B
     d92:	85 30       	cpi	r24, 0x05	; 5
     d94:	08 f1       	brcs	.+66     	; 0xdd8 <ProcessKn2+0xfe>
				return;
			}		
			else {
				if(flag_press==ON) {
     d96:	80 91 2d 01 	lds	r24, 0x012D
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	29 f4       	brne	.+10     	; 0xda8 <ProcessKn2+0xce>
					flag_press=OFF;
     d9e:	10 92 2d 01 	sts	0x012D, r1
					SendMessage(MSG_KN2_PRESSED);	//change
     da2:	85 e0       	ldi	r24, 0x05	; 5
     da4:	0e 94 9b 07 	call	0xf36	; 0xf36 <SendMessage>
				}		

				if(flag_long_press==ON) {
     da8:	80 91 2c 01 	lds	r24, 0x012C
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	29 f4       	brne	.+10     	; 0xdba <ProcessKn2+0xe0>
					flag_long_press=OFF;
     db0:	10 92 2c 01 	sts	0x012C, r1
					SendMessage(MSG_KN2_LONGPRESSED);	//change
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	0e 94 9b 07 	call	0xf36	; 0xf36 <SendMessage>
				}		
				if(*flag_hold==ON)
     dba:	88 81       	ld	r24, Y
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <ProcessKn2+0xec>
					SendMessage(MSG_KN2_RELEASED);		//change			
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	0e 94 9b 07 	call	0xf36	; 0xf36 <SendMessage>

				*flag_hold=OFF;
     dc6:	18 82       	st	Y, r1
				counter_delay=0;
     dc8:	10 92 2a 01 	sts	0x012A, r1
     dcc:	10 92 29 01 	sts	0x0129, r1
				counter=0;
     dd0:	10 92 2b 01 	sts	0x012B, r1
				kn_status=NOT_PRESSED;
     dd4:	10 92 2e 01 	sts	0x012E, r1
				return;
			}
		}
	break;
}//sw	
}//v
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <InitPortsKn2>:
//-----------------------------------------------------------
void InitPortsKn2() {	//change
	DDR_KN2 &= ~(1<<KN2);	//change
     dde:	54 98       	cbi	0x0a, 4	; 10
	PORT_KN2 |= (1<<KN2);	//change
     de0:	5c 9a       	sbi	0x0b, 4	; 11
}
     de2:	08 95       	ret

00000de4 <InitPortsLedRed>:
#include "led.h"

void InitPortsLedRed() {
	DDR_LED_RED |= (1<<LED_RED);
     de4:	38 9a       	sbi	0x07, 0	; 7
	PORT_LED_RED &= ~(1<<LED_RED);
     de6:	40 98       	cbi	0x08, 0	; 8
}
     de8:	08 95       	ret

00000dea <InitPortsLedBlue>:

void InitPortsLedBlue() {
	DDR_LED_BLUE |= (1<<LED_BLUE);
     dea:	38 9a       	sbi	0x07, 0	; 7
	PORT_LED_BLUE &= ~(1<<LED_BLUE);
     dec:	40 98       	cbi	0x08, 0	; 8
}
     dee:	08 95       	ret

00000df0 <InitPortsLedGreen>:
void InitPortsLedGreen() {
	DDR_LED_GREEN |= (1<<LED_GREEN);
     df0:	20 9a       	sbi	0x04, 0	; 4
	PORT_LED_GREEN &= ~(1<<LED_GREEN);
     df2:	28 98       	cbi	0x05, 0	; 5
}
     df4:	08 95       	ret

00000df6 <InitPortsLedWhite>:
void InitPortsLedWhite() {
	DDR_LED_WHITE |= (1<<LED_WHITE);
     df6:	38 9a       	sbi	0x07, 0	; 7
	PORT_LED_WHITE &= ~(1<<LED_WHITE);
     df8:	40 98       	cbi	0x08, 0	; 8
}
     dfa:	08 95       	ret

00000dfc <TestLedRed>:

//-------------------------------
void TestLedRed() {
			PORT_LED_RED ^= 1<<LED_RED;			
     dfc:	88 b1       	in	r24, 0x08	; 8
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	89 27       	eor	r24, r25
     e02:	88 b9       	out	0x08, r24	; 8
}
     e04:	08 95       	ret

00000e06 <TestLedBlue>:
void TestLedBlue() {
			PORT_LED_BLUE ^= 1<<LED_BLUE;			
     e06:	88 b1       	in	r24, 0x08	; 8
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	89 27       	eor	r24, r25
     e0c:	88 b9       	out	0x08, r24	; 8
}
     e0e:	08 95       	ret

00000e10 <TestLedGreen>:
void TestLedGreen() {
			PORT_LED_GREEN ^= 1<<LED_GREEN;			
     e10:	85 b1       	in	r24, 0x05	; 5
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	89 27       	eor	r24, r25
     e16:	85 b9       	out	0x05, r24	; 5
}
     e18:	08 95       	ret

00000e1a <TestLedWhite>:
void TestLedWhite() {
			PORT_LED_WHITE ^= 1<<LED_WHITE;			
     e1a:	88 b1       	in	r24, 0x08	; 8
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	89 27       	eor	r24, r25
     e20:	88 b9       	out	0x08, r24	; 8
}
     e22:	08 95       	ret

00000e24 <LedRedOn>:

void LedRedOn() {
	PORT_LED_RED |= 1<<LED_RED;
     e24:	40 9a       	sbi	0x08, 0	; 8
}
     e26:	08 95       	ret

00000e28 <LedRedOff>:
void LedRedOff() {
	PORT_LED_RED &= ~(1<<LED_RED);
     e28:	40 98       	cbi	0x08, 0	; 8
}
     e2a:	08 95       	ret

00000e2c <LedBlueOn>:

void LedBlueOn() {
	SB(PORT_LED_BLUE,LED_BLUE);
     e2c:	40 9a       	sbi	0x08, 0	; 8
}
     e2e:	08 95       	ret

00000e30 <LedBlueOff>:
void LedBlueOff() {
	CB(PORT_LED_BLUE,LED_BLUE);
     e30:	40 98       	cbi	0x08, 0	; 8
}
     e32:	08 95       	ret

00000e34 <LedGreenOn>:
void LedGreenOn() {
	SB(PORT_LED_GREEN,LED_GREEN);
     e34:	28 9a       	sbi	0x05, 0	; 5
}
     e36:	08 95       	ret

00000e38 <LedGreenOff>:
void LedGreenOff() {
	CB(PORT_LED_GREEN,LED_GREEN);
     e38:	28 98       	cbi	0x05, 0	; 5
}
     e3a:	08 95       	ret

00000e3c <LedWhiteOn>:
void LedWhiteOn() {
	SB(PORT_LED_WHITE,LED_WHITE);
     e3c:	40 9a       	sbi	0x08, 0	; 8
}
     e3e:	08 95       	ret

00000e40 <LedWhiteOff>:
void LedWhiteOff() {
	CB(PORT_LED_WHITE,LED_WHITE);
     e40:	40 98       	cbi	0x08, 0	; 8
}
     e42:	08 95       	ret

00000e44 <StartGTimer>:
volatile static u16 TimeMs = 0;
volatile u08 f1ms=0;

//-----------------------------------------
void StartGTimer(u08 GTimerID,u16 delay) { 		// Функция запуска таймера на заданную задержку
  	if(GTStates[GTimerID]==TIMER_STOPPED)  	{
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	fc 01       	movw	r30, r24
     e48:	ea 5a       	subi	r30, 0xAA	; 170
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	20 81       	ld	r18, Z
     e4e:	22 23       	and	r18, r18
     e50:	89 f4       	brne	.+34     	; 0xe74 <StartGTimer+0x30>
		GTStates[GTimerID]=TIMER_RUNNING;
     e52:	21 e0       	ldi	r18, 0x01	; 1
     e54:	20 83       	st	Z, r18
		CLI
     e56:	f8 94       	cli
		GTDelay[GTimerID]=TimeMs+delay;
     e58:	20 91 30 01 	lds	r18, 0x0130
     e5c:	30 91 31 01 	lds	r19, 0x0131
     e60:	fc 01       	movw	r30, r24
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	eb 59       	subi	r30, 0x9B	; 155
     e68:	fe 4f       	sbci	r31, 0xFE	; 254
     e6a:	26 0f       	add	r18, r22
     e6c:	37 1f       	adc	r19, r23
     e6e:	31 83       	std	Z+1, r19	; 0x01
     e70:	20 83       	st	Z, r18
		SEI
     e72:	78 94       	sei
     e74:	08 95       	ret

00000e76 <StopGTimer>:
  	}
}
//-----------------------------------------
void StopGTimer(u08 GTimerID)	{			//Остановка таймера
  	if(GTStates[GTimerID]==TIMER_RUNNING)
     e76:	e8 2f       	mov	r30, r24
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	ea 5a       	subi	r30, 0xAA	; 170
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	80 81       	ld	r24, Z
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	09 f4       	brne	.+2      	; 0xe86 <StopGTimer+0x10>
		GTStates[GTimerID]=TIMER_STOPPED;
     e84:	10 82       	st	Z, r1
     e86:	08 95       	ret

00000e88 <ExpGTimer>:
}
//-----------------------------------------
u08 ExpGTimer(u08 GTimerID) {				//Проверка таймера
	if(GTStates[GTimerID]==TIMER_RUNNING) {
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	dc 01       	movw	r26, r24
     e8c:	aa 5a       	subi	r26, 0xAA	; 170
     e8e:	be 4f       	sbci	r27, 0xFE	; 254
     e90:	2c 91       	ld	r18, X
     e92:	21 30       	cpi	r18, 0x01	; 1
     e94:	d9 f4       	brne	.+54     	; 0xecc <ExpGTimer+0x44>
		CLI
     e96:	f8 94       	cli
		if ((TimeMs - GTDelay[GTimerID]) < (1UL << 15)) {
     e98:	20 91 30 01 	lds	r18, 0x0130
     e9c:	30 91 31 01 	lds	r19, 0x0131
     ea0:	fc 01       	movw	r30, r24
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	eb 59       	subi	r30, 0x9B	; 155
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	28 1b       	sub	r18, r24
     eb0:	39 0b       	sbc	r19, r25
     eb2:	37 fd       	sbrc	r19, 7
     eb4:	0b c0       	rjmp	.+22     	; 0xecc <ExpGTimer+0x44>
			if (GTDelay[GTimerID] <= TimeMs) {
     eb6:	20 91 30 01 	lds	r18, 0x0130
     eba:	30 91 31 01 	lds	r19, 0x0131
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	20 f0       	brcs	.+8      	; 0xecc <ExpGTimer+0x44>
				GTStates[GTimerID]=TIMER_STOPPED;
     ec4:	1c 92       	st	X, r1
				SEI
     ec6:	78 94       	sei
				return 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	08 95       	ret
			}			
		}
	}	
	SEI	
     ecc:	78 94       	sei
	return 0;		
     ece:	80 e0       	ldi	r24, 0x00	; 0
}
     ed0:	08 95       	ret

00000ed2 <InitGTimers>:
//-----------------------------------------
void InitGTimers() {
	TimeMs = 0;
     ed2:	10 92 31 01 	sts	0x0131, r1
     ed6:	10 92 30 01 	sts	0x0130, r1
     eda:	e6 e5       	ldi	r30, 0x56	; 86
     edc:	f1 e0       	ldi	r31, 0x01	; 1
 	for(u08 i=0; i<MAX_GTIMERS; i++)
 		GTStates[i]=TIMER_STOPPED;
     ede:	11 92       	st	Z+, r1
	return 0;		
}
//-----------------------------------------
void InitGTimers() {
	TimeMs = 0;
 	for(u08 i=0; i<MAX_GTIMERS; i++)
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	e5 36       	cpi	r30, 0x65	; 101
     ee4:	f8 07       	cpc	r31, r24
     ee6:	d9 f7       	brne	.-10     	; 0xede <InitGTimers+0xc>
     ee8:	e5 e6       	ldi	r30, 0x65	; 101
     eea:	f1 e0       	ldi	r31, 0x01	; 1
 		GTStates[i]=TIMER_STOPPED;
 	for(u08 i=0; i<MAX_GTIMERS; i++)
 		GTDelay[i]=0;
     eec:	11 92       	st	Z+, r1
     eee:	11 92       	st	Z+, r1
//-----------------------------------------
void InitGTimers() {
	TimeMs = 0;
 	for(u08 i=0; i<MAX_GTIMERS; i++)
 		GTStates[i]=TIMER_STOPPED;
 	for(u08 i=0; i<MAX_GTIMERS; i++)
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	e3 38       	cpi	r30, 0x83	; 131
     ef4:	f8 07       	cpc	r31, r24
     ef6:	d1 f7       	brne	.-12     	; 0xeec <InitGTimers+0x1a>
 		GTDelay[i]=0;
}
     ef8:	08 95       	ret

00000efa <SysTick_Handler>:
//-----------------------------------------
void SysTick_Handler() {
	TimeMs++;
     efa:	80 91 30 01 	lds	r24, 0x0130
     efe:	90 91 31 01 	lds	r25, 0x0131
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	90 93 31 01 	sts	0x0131, r25
     f08:	80 93 30 01 	sts	0x0130, r24
	f1ms=1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 2f 01 	sts	0x012F, r24
}
     f12:	08 95       	ret

00000f14 <InitMessages>:

//prototypes
void InitMessages() {
	uint8_t i;
	for (i=0;i<MAX_MESSAGES;i++)
		Messages[i]=0;
     f14:	10 92 83 01 	sts	0x0183, r1
     f18:	10 92 84 01 	sts	0x0184, r1
     f1c:	10 92 85 01 	sts	0x0185, r1
     f20:	10 92 86 01 	sts	0x0186, r1
     f24:	10 92 87 01 	sts	0x0187, r1
     f28:	10 92 88 01 	sts	0x0188, r1
     f2c:	10 92 89 01 	sts	0x0189, r1
     f30:	10 92 8a 01 	sts	0x018A, r1
	for (i=0;i<MAX_BROADCAST_MESSAGES;i++)
		Broadcast_Messages[i]=0;
}
     f34:	08 95       	ret

00000f36 <SendMessage>:
void SendMessage(uint8_t msg) {
	if (Messages[msg]==0)
     f36:	e8 2f       	mov	r30, r24
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	ed 57       	subi	r30, 0x7D	; 125
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	80 81       	ld	r24, Z
     f40:	88 23       	and	r24, r24
     f42:	11 f4       	brne	.+4      	; 0xf48 <SendMessage+0x12>
		Messages[msg]=1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	80 83       	st	Z, r24
     f48:	08 95       	ret

00000f4a <SendBroadcastMessage>:
}
void SendBroadcastMessage(uint8_t msg) {
	if (Broadcast_Messages[msg]==0)
     f4a:	e8 2f       	mov	r30, r24
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	ed 57       	subi	r30, 0x7D	; 125
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	80 81       	ld	r24, Z
     f54:	88 23       	and	r24, r24
     f56:	11 f4       	brne	.+4      	; 0xf5c <SendBroadcastMessage+0x12>
	Broadcast_Messages[msg]=1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 83       	st	Z, r24
     f5c:	08 95       	ret

00000f5e <ProcessMessages>:
}
void ProcessMessages() {
     f5e:	e3 e8       	ldi	r30, 0x83	; 131
     f60:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<MAX_MESSAGES;i++) {
		if (Messages[i]==2) Messages[i]=0;
		if (Messages[i]==1) Messages[i]=2;	
     f62:	82 e0       	ldi	r24, 0x02	; 2
	Broadcast_Messages[msg]=1;
}
void ProcessMessages() {
	uint8_t i;
	for (i=0;i<MAX_MESSAGES;i++) {
		if (Messages[i]==2) Messages[i]=0;
     f64:	90 81       	ld	r25, Z
     f66:	92 30       	cpi	r25, 0x02	; 2
     f68:	09 f4       	brne	.+2      	; 0xf6c <ProcessMessages+0xe>
     f6a:	10 82       	st	Z, r1
		if (Messages[i]==1) Messages[i]=2;	
     f6c:	90 81       	ld	r25, Z
     f6e:	91 30       	cpi	r25, 0x01	; 1
     f70:	09 f4       	brne	.+2      	; 0xf74 <ProcessMessages+0x16>
     f72:	80 83       	st	Z, r24
     f74:	31 96       	adiw	r30, 0x01	; 1
	if (Broadcast_Messages[msg]==0)
	Broadcast_Messages[msg]=1;
}
void ProcessMessages() {
	uint8_t i;
	for (i=0;i<MAX_MESSAGES;i++) {
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	eb 38       	cpi	r30, 0x8B	; 139
     f7a:	f9 07       	cpc	r31, r25
     f7c:	99 f7       	brne	.-26     	; 0xf64 <ProcessMessages+0x6>
	for (i=0;i<MAX_BROADCAST_MESSAGES;i++) {
		if (Broadcast_Messages[i]==2) Broadcast_Messages[i]=0;
		if (Broadcast_Messages[i]==1) Broadcast_Messages[i]=2;	
	}

}
     f7e:	08 95       	ret

00000f80 <GetMessage>:
uint8_t GetMessage(uint8_t msg) {
	if (Messages[msg]==2) {
     f80:	e8 2f       	mov	r30, r24
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	ed 57       	subi	r30, 0x7D	; 125
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	80 81       	ld	r24, Z
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	19 f4       	brne	.+6      	; 0xf94 <GetMessage+0x14>
		Messages[msg]=0;
     f8e:	10 82       	st	Z, r1
		return 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	08 95       	ret
	}
	return 0;
     f94:	80 e0       	ldi	r24, 0x00	; 0
}
     f96:	08 95       	ret

00000f98 <GetBroadcastMessage>:
uint8_t GetBroadcastMessage(uint8_t msg) {
	if (Broadcast_Messages[msg]==2) {
     f98:	e8 2f       	mov	r30, r24
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	ed 57       	subi	r30, 0x7D	; 125
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	80 81       	ld	r24, Z
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	19 f4       	brne	.+6      	; 0xfac <GetBroadcastMessage+0x14>
		Broadcast_Messages[msg]=0;
     fa6:	10 82       	st	Z, r1
		return 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	08 95       	ret
	}
	return 0;
     fac:	80 e0       	ldi	r24, 0x00	; 0
}
     fae:	08 95       	ret

00000fb0 <ProcessDS18B20>:
extern s16 data_di;

s32 temperature;
s16 temp_data;

void ProcessDS18B20() {
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
    static u08 buf[9];
    u08 i;
    u08 crc;	
    // If an error has occurred since last time, clear all flags and
    // return to idle state.
    if (OWIStatus.error) {
     fb4:	80 91 91 01 	lds	r24, 0x0191
     fb8:	82 ff       	sbrs	r24, 2
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <ProcessDS18B20+0x14>
        state = OWI_STATE_IDLE;
     fbc:	10 92 3b 01 	sts	0x013B, r1
        OWIStatus.allFlags = FALSE;
     fc0:	10 92 91 01 	sts	0x0191, r1
    }
    
    switch (state) {
     fc4:	80 91 3b 01 	lds	r24, 0x013B
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	09 f4       	brne	.+2      	; 0xfce <ProcessDS18B20+0x1e>
     fcc:	86 c0       	rjmp	.+268    	; 0x10da <ProcessDS18B20+0x12a>
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	28 f4       	brcc	.+10     	; 0xfdc <ProcessDS18B20+0x2c>
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	79 f0       	breq	.+30     	; 0xff4 <ProcessDS18B20+0x44>
     fd6:	82 30       	cpi	r24, 0x02	; 2
     fd8:	f0 f4       	brcc	.+60     	; 0x1016 <ProcessDS18B20+0x66>
     fda:	08 c0       	rjmp	.+16     	; 0xfec <ProcessDS18B20+0x3c>
     fdc:	85 30       	cpi	r24, 0x05	; 5
     fde:	e1 f1       	breq	.+120    	; 0x1058 <ProcessDS18B20+0xa8>
     fe0:	85 30       	cpi	r24, 0x05	; 5
     fe2:	30 f1       	brcs	.+76     	; 0x1030 <ProcessDS18B20+0x80>
     fe4:	86 30       	cpi	r24, 0x06	; 6
     fe6:	09 f0       	breq	.+2      	; 0xfea <ProcessDS18B20+0x3a>
     fe8:	7d c0       	rjmp	.+250    	; 0x10e4 <ProcessDS18B20+0x134>
     fea:	3d c0       	rjmp	.+122    	; 0x1066 <ProcessDS18B20+0xb6>
        case OWI_STATE_IDLE: {
            // Send reset signal and update state.
            OWI_DetectPresence();
     fec:	0e 94 c3 08 	call	0x1186	; 0x1186 <OWI_DetectPresence>
            state = OWI_STATE_DETECT_PRESENCE1;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	76 c0       	rjmp	.+236    	; 0x10e0 <ProcessDS18B20+0x130>
            break;
        }

        case OWI_STATE_DETECT_PRESENCE1: {
            // If no presence was detected, go back to idle state.
            if(OWIStatus.presenceDetected == FALSE) {
     ff4:	80 91 91 01 	lds	r24, 0x0191
     ff8:	81 ff       	sbrs	r24, 1
     ffa:	1e c0       	rjmp	.+60     	; 0x1038 <ProcessDS18B20+0x88>
                state = OWI_STATE_IDLE;
            }
            // If presence was detected, send Skip ROM and Start conversion
            // signals. 
            else {
                buf[0] = OWI_ROM_SKIP;
     ffc:	8c ec       	ldi	r24, 0xCC	; 204
     ffe:	80 93 32 01 	sts	0x0132, r24
                buf[1] = DS1820_START_CONVERSION;
    1002:	84 e4       	ldi	r24, 0x44	; 68
    1004:	80 93 33 01 	sts	0x0133, r24
                OWI_TransmitData(buf, 16);
    1008:	82 e3       	ldi	r24, 0x32	; 50
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	60 e1       	ldi	r22, 0x10	; 16
    100e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <OWI_TransmitData>
                state = OWI_STATE_WAIT_FOR_CONVERSION1;
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	65 c0       	rjmp	.+202    	; 0x10e0 <ProcessDS18B20+0x130>
            }
            break;
        }
		case OWI_STATE_WAIT_FOR_CONVERSION1: 
			StartGTimer(timer_delay_ds18b20,800);
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	60 e2       	ldi	r22, 0x20	; 32
    101a:	73 e0       	ldi	r23, 0x03	; 3
    101c:	0e 94 22 07 	call	0xe44	; 0xe44 <StartGTimer>
			if(ExpGTimer(timer_delay_ds18b20)) {
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	0e 94 44 07 	call	0xe88	; 0xe88 <ExpGTimer>
    1026:	88 23       	and	r24, r24
    1028:	09 f4       	brne	.+2      	; 0x102c <ProcessDS18B20+0x7c>
    102a:	5c c0       	rjmp	.+184    	; 0x10e4 <ProcessDS18B20+0x134>
				state = OWI_STATE_WAIT_FOR_CONVERSION2;
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	58 c0       	rjmp	.+176    	; 0x10e0 <ProcessDS18B20+0x130>
               state = OWI_STATE_DETECT_PRESENCE2;
		break;

        case OWI_STATE_DETECT_PRESENCE2: {
            // If no presence was detected, go back to idle state.
            if(OWIStatus.presenceDetected == FALSE) {
    1030:	80 91 91 01 	lds	r24, 0x0191
    1034:	81 fd       	sbrc	r24, 1
    1036:	03 c0       	rjmp	.+6      	; 0x103e <ProcessDS18B20+0x8e>
                state = OWI_STATE_IDLE;
    1038:	10 92 3b 01 	sts	0x013B, r1
    103c:	53 c0       	rjmp	.+166    	; 0x10e4 <ProcessDS18B20+0x134>
            }
            // If presence was detected, send Skip ROM and Read scratchpad
            // signals. 
            else {
                buf[0] = OWI_ROM_SKIP;
    103e:	8c ec       	ldi	r24, 0xCC	; 204
    1040:	80 93 32 01 	sts	0x0132, r24
                buf[1] = DS1820_READ_SCRATCHPAD;
    1044:	8e eb       	ldi	r24, 0xBE	; 190
    1046:	80 93 33 01 	sts	0x0133, r24
                OWI_TransmitData(buf, 16);
    104a:	82 e3       	ldi	r24, 0x32	; 50
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	60 e1       	ldi	r22, 0x10	; 16
    1050:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <OWI_TransmitData>
                state = OWI_STATE_READ_SCRATCHPAD;   
    1054:	85 e0       	ldi	r24, 0x05	; 5
    1056:	44 c0       	rjmp	.+136    	; 0x10e0 <ProcessDS18B20+0x130>
            break;
        }
    
        case OWI_STATE_READ_SCRATCHPAD: {
            // Read the 9 bytes of scratchpad data.
            OWI_ReceiveData(buf, 9 * 8);
    1058:	82 e3       	ldi	r24, 0x32	; 50
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	68 e4       	ldi	r22, 0x48	; 72
    105e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <OWI_ReceiveData>
            state = OWI_STATE_CHECK_CRC;
    1062:	86 e0       	ldi	r24, 0x06	; 6
    1064:	3d c0       	rjmp	.+122    	; 0x10e0 <ProcessDS18B20+0x130>
            break;
    1066:	c2 e3       	ldi	r28, 0x32	; 50
    1068:	d1 e0       	ldi	r29, 0x01	; 1
extern s16 data_di;

s32 temperature;
s16 temp_data;

void ProcessDS18B20() {
    106a:	60 e0       	ldi	r22, 0x00	; 0
        case OWI_STATE_CHECK_CRC: {
            // Compare the computed crc with the crc read from the 
            // scratchpad. 
            crc = 0;
            for(i = 0; i < 8; i++) {
                crc =  OWI_ComputeCRC8(buf[i], crc);
    106c:	89 91       	ld	r24, Y+
    106e:	0e 94 75 08 	call	0x10ea	; 0x10ea <OWI_ComputeCRC8>
    1072:	68 2f       	mov	r22, r24
    
        case OWI_STATE_CHECK_CRC: {
            // Compare the computed crc with the crc read from the 
            // scratchpad. 
            crc = 0;
            for(i = 0; i < 8; i++) {
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	ca 33       	cpi	r28, 0x3A	; 58
    1078:	d8 07       	cpc	r29, r24
    107a:	c1 f7       	brne	.-16     	; 0x106c <ProcessDS18B20+0xbc>
                crc =  OWI_ComputeCRC8(buf[i], crc);
            }
            // If they match, update the temperature variable.
            if (crc == buf[8]) {
    107c:	80 91 3a 01 	lds	r24, 0x013A
    1080:	68 17       	cp	r22, r24
    1082:	59 f5       	brne	.+86     	; 0x10da <ProcessDS18B20+0x12a>
                temperature = buf[0] | (buf[1] << 8);                
    1084:	90 91 33 01 	lds	r25, 0x0133
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	60 91 32 01 	lds	r22, 0x0132
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	68 2b       	or	r22, r24
    1092:	79 2b       	or	r23, r25
    1094:	88 27       	eor	r24, r24
    1096:	77 fd       	sbrc	r23, 7
    1098:	80 95       	com	r24
    109a:	98 2f       	mov	r25, r24
    109c:	60 93 8d 01 	sts	0x018D, r22
    10a0:	70 93 8e 01 	sts	0x018E, r23
    10a4:	80 93 8f 01 	sts	0x018F, r24
    10a8:	90 93 90 01 	sts	0x0190, r25
                state = OWI_STATE_IDLE;
    10ac:	10 92 3b 01 	sts	0x013B, r1

				temp_data=(temperature*10)/16;
    10b0:	2a e0       	ldi	r18, 0x0A	; 10
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__mulsi3>
    10bc:	20 e1       	ldi	r18, 0x10	; 16
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__divmodsi4>
    10c8:	30 93 8c 01 	sts	0x018C, r19
    10cc:	20 93 8b 01 	sts	0x018B, r18
				data_di=temp_data;
    10d0:	30 93 11 01 	sts	0x0111, r19
    10d4:	20 93 10 01 	sts	0x0110, r18
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <ProcessDS18B20+0x134>
				LCD(1);
*/	          }
            // If they don't match, go back to the second Reset to 
            // read the scratchpad again.
            else {
                OWI_DetectPresence();
    10da:	0e 94 c3 08 	call	0x1186	; 0x1186 <OWI_DetectPresence>
                state = OWI_STATE_DETECT_PRESENCE2;
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	80 93 3b 01 	sts	0x013B, r24
            }
            break;
        }
    }
}
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <OWI_ComputeCRC8>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC8 value of a
 *          longer string of data.
 */
unsigned char OWI_ComputeCRC8(unsigned char inData, unsigned char seed)
{
    10ea:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x18;
    10ec:	28 e1       	ldi	r18, 0x18	; 24
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
    10ee:	36 2f       	mov	r19, r22
    10f0:	38 27       	eor	r19, r24
        if (temp == 0)
    10f2:	30 fd       	sbrc	r19, 0
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <OWI_ComputeCRC8+0x10>
        {
            seed >>= 1;
    10f6:	66 95       	lsr	r22
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <OWI_ComputeCRC8+0x16>
        }
        else
        {
            seed ^= 0x18;
    10fa:	62 27       	eor	r22, r18
            seed >>= 1;
    10fc:	66 95       	lsr	r22
            seed |= 0x80;
    10fe:	60 68       	ori	r22, 0x80	; 128
    1100:	91 50       	subi	r25, 0x01	; 1
unsigned char OWI_ComputeCRC8(unsigned char inData, unsigned char seed)
{
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    1102:	11 f0       	breq	.+4      	; 0x1108 <OWI_ComputeCRC8+0x1e>
        {
            seed ^= 0x18;
            seed >>= 1;
            seed |= 0x80;
        }
        inData >>= 1;
    1104:	86 95       	lsr	r24
    1106:	f3 cf       	rjmp	.-26     	; 0x10ee <OWI_ComputeCRC8+0x4>
    }
    return seed;    
}
    1108:	86 2f       	mov	r24, r22
    110a:	08 95       	ret

0000110c <OWI_ComputeCRC16>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC16 value of a
 *          longer string of data.
 */
unsigned int OWI_ComputeCRC16(unsigned char inData, unsigned int seed)
{
    110c:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x4002;
    110e:	22 e0       	ldi	r18, 0x02	; 2
    1110:	30 e4       	ldi	r19, 0x40	; 64
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
    1112:	48 2f       	mov	r20, r24
    1114:	46 27       	eor	r20, r22
        if (temp == 0)
    1116:	40 fd       	sbrc	r20, 0
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <OWI_ComputeCRC16+0x14>
        {
            seed >>= 1;
    111a:	76 95       	lsr	r23
    111c:	67 95       	ror	r22
    111e:	05 c0       	rjmp	.+10     	; 0x112a <OWI_ComputeCRC16+0x1e>
        }
        else
        {
            seed ^= 0x4002;
    1120:	62 27       	eor	r22, r18
    1122:	73 27       	eor	r23, r19
            seed >>= 1;
    1124:	76 95       	lsr	r23
    1126:	67 95       	ror	r22
            seed |= 0x8000;
    1128:	70 68       	ori	r23, 0x80	; 128
    112a:	91 50       	subi	r25, 0x01	; 1
unsigned int OWI_ComputeCRC16(unsigned char inData, unsigned int seed)
{
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    112c:	11 f0       	breq	.+4      	; 0x1132 <OWI_ComputeCRC16+0x26>
        {
            seed ^= 0x4002;
            seed >>= 1;
            seed |= 0x8000;
        }
        inData >>= 1;
    112e:	86 95       	lsr	r24
    1130:	f0 cf       	rjmp	.-32     	; 0x1112 <OWI_ComputeCRC16+0x6>
    }
    return seed;    
}
    1132:	cb 01       	movw	r24, r22
    1134:	08 95       	ret

00001136 <OWI_CheckRomCRC>:
 *
 *  \retval OWI_CRC_OK      The CRC's matched.
 *  \retval OWI_CRC_ERROR   There was a discrepancy between the calculated and the stored CRC.
 */
unsigned char OWI_CheckRomCRC(unsigned char * romValue)
{
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	ec 01       	movw	r28, r24
    1142:	8c 01       	movw	r16, r24
    1144:	67 e0       	ldi	r22, 0x07	; 7
    1146:	f6 2e       	mov	r15, r22
    unsigned char i;
    unsigned char crc8 = 0;
    1148:	60 e0       	ldi	r22, 0x00	; 0
    
    for (i = 0; i < 7; i++)
    {
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
    114a:	f8 01       	movw	r30, r16
    114c:	81 91       	ld	r24, Z+
    114e:	8f 01       	movw	r16, r30
    1150:	0e 94 75 08 	call	0x10ea	; 0x10ea <OWI_ComputeCRC8>
    1154:	68 2f       	mov	r22, r24
        romValue++;
    1156:	fa 94       	dec	r15
unsigned char OWI_CheckRomCRC(unsigned char * romValue)
{
    unsigned char i;
    unsigned char crc8 = 0;
    
    for (i = 0; i < 7; i++)
    1158:	c1 f7       	brne	.-16     	; 0x114a <OWI_CheckRomCRC+0x14>
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
        romValue++;
    }
    if (crc8 == (*romValue))
    {
        return OWI_CRC_OK;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	9f 81       	ldd	r25, Y+7	; 0x07
    115e:	69 17       	cp	r22, r25
    1160:	09 f4       	brne	.+2      	; 0x1164 <OWI_CheckRomCRC+0x2e>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    }
    return OWI_CRC_ERROR;
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	08 95       	ret

00001170 <OWI_Init>:
 *
 *  \note   Parameters are set in "OWIInterruptDriven.h"
 */
void OWI_Init(void) {
    // Choose single or double UART speed.
    OWI_UART_STATCTRL_REG_A = (OWI_UART_2X << OWI_U2X);
    1170:	10 92 c0 00 	sts	0x00C0, r1
    
    // Enable UART receiver, transmitter and interrupt on receive;
    OWI_UART_STATCTRL_REG_B = (1 << OWI_RXEN) | (1 << OWI_TXEN) | (1 << OWI_RXCIE);
    1174:	88 e9       	ldi	r24, 0x98	; 152
    1176:	80 93 c1 00 	sts	0x00C1, r24
    // Set up asynchronous mode, 8 data bits, no parity, 1 stop bit.
    // (Initial value, can be removed)
    #ifdef URSEL
    OWI_UART_STATCTRL_REG_C = (1 << OWI_URSEL) | (1 << OWI_UCSZ1) | (1 << OWI_UCSZ0);
    #else
    OWI_UART_STATCTRL_REG_C = (1 << OWI_UCSZ1) | (1 << OWI_UCSZ0);
    117a:	86 e0       	ldi	r24, 0x06	; 6
    117c:	80 93 c2 00 	sts	0x00C2, r24
    #endif
    
    // Clear OWI flags.
    OWIStatus.allFlags = FALSE;
    1180:	10 92 91 01 	sts	0x0191, r1
}
    1184:	08 95       	ret

00001186 <OWI_DetectPresence>:
 *  FALSE, the presence flag indicates whether a Presence signal was 
 *  received.
 */
void OWI_DetectPresence(void) {
    // Set OWI busy flag
    OWIStatus.busy = TRUE;
    1186:	80 91 91 01 	lds	r24, 0x0191
    118a:	81 60       	ori	r24, 0x01	; 1
    118c:	80 93 91 01 	sts	0x0191, r24
    
    // Set the BAUD Rate to 9600 bps for reset/presence signalling.
    OWI_UART_BAUD_RATE_REG_L = OWI_UBRR_9600;
    1190:	84 e3       	ldi	r24, 0x34	; 52
    1192:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable UART data register empty interrupt to start the UART
    // transmitter.
    OWI_UART_STATCTRL_REG_B |= (1 << OWI_UDRIE);
    1196:	e1 ec       	ldi	r30, 0xC1	; 193
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	80 62       	ori	r24, 0x20	; 32
    119e:	80 83       	st	Z, r24
}
    11a0:	08 95       	ret

000011a2 <OWI_TransmitData>:
 *  
 *  \param  dataLength  The number of bits to be transmitted.
 */
void OWI_TransmitData(u08 * data, u08 dataLength) {
    // Set OWI busy flag
    OWIStatus.busy = TRUE;
    11a2:	20 91 91 01 	lds	r18, 0x0191
    11a6:	21 60       	ori	r18, 0x01	; 1
    11a8:	20 93 91 01 	sts	0x0191, r18
    
    // Set the data buffer pointer and data length.
    OWIDataBuffer = data;
    11ac:	90 93 93 01 	sts	0x0193, r25
    11b0:	80 93 92 01 	sts	0x0192, r24
    OWIBufferLength = dataLength;
    11b4:	60 93 94 01 	sts	0x0194, r22
    
    // Enable UART data register empty interrupt to start the UART
    // transmitter.    
    OWI_UART_STATCTRL_REG_B |= (1 << OWI_UDRIE);
    11b8:	e1 ec       	ldi	r30, 0xC1	; 193
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 62       	ori	r24, 0x20	; 32
    11c0:	80 83       	st	Z, r24
}
    11c2:	08 95       	ret

000011c4 <OWI_ReceiveData>:
 */
void OWI_ReceiveData(u08 * data, u08 dataLength) {
    u08 numBytes;

    // Fill buffer with 1's (Write 1 and Read waveforms are similar).
    numBytes = dataLength >> 3;
    11c4:	46 2f       	mov	r20, r22
    11c6:	46 95       	lsr	r20
    11c8:	46 95       	lsr	r20
    11ca:	46 95       	lsr	r20
    if (dataLength & 0x07) {
    11cc:	26 2f       	mov	r18, r22
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	27 70       	andi	r18, 0x07	; 7
    11d2:	30 70       	andi	r19, 0x00	; 0
    11d4:	21 15       	cp	r18, r1
    11d6:	31 05       	cpc	r19, r1
    11d8:	49 f0       	breq	.+18     	; 0x11ec <OWI_ReceiveData+0x28>
        numBytes++;
    11da:	4f 5f       	subi	r20, 0xFF	; 255
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <OWI_ReceiveData+0x28>
    }
    
    while(numBytes) {
        data[numBytes - 1] = 0xff;
    11de:	fc 01       	movw	r30, r24
    11e0:	e4 0f       	add	r30, r20
    11e2:	f1 1d       	adc	r31, r1
    11e4:	31 97       	sbiw	r30, 0x01	; 1
    11e6:	20 83       	st	Z, r18
        numBytes--;
    11e8:	41 50       	subi	r20, 0x01	; 1
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <OWI_ReceiveData+0x2a>
    if (dataLength & 0x07) {
        numBytes++;
    }
    
    while(numBytes) {
        data[numBytes - 1] = 0xff;
    11ec:	2f ef       	ldi	r18, 0xFF	; 255
    numBytes = dataLength >> 3;
    if (dataLength & 0x07) {
        numBytes++;
    }
    
    while(numBytes) {
    11ee:	44 23       	and	r20, r20
    11f0:	b1 f7       	brne	.-20     	; 0x11de <OWI_ReceiveData+0x1a>
        data[numBytes - 1] = 0xff;
        numBytes--;
    }

    // Transmit the '1'-filled buffer on the bus to receive data.
    OWI_TransmitData(data, dataLength);
    11f2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <OWI_TransmitData>
}
    11f6:	08 95       	ret

000011f8 <__vector_18>:
 *  This ISR takes care of reception and interpretation of signals
 *  from the 1-Wire bus.
 */
//#pragma vector = OWI_UART_RXC_VECT
//__interrupt void UART_RXC_ISR() {
ISR(USART_RX_vect) {
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	8f 93       	push	r24
    1208:	9f 93       	push	r25
    120a:	ef 93       	push	r30
    120c:	ff 93       	push	r31
    static u08 receiveBuffer = 0;
    static u08 byteIndex = 0;
    u08 waveform;
    
    // Check for frame error.
    if (OWI_UART_STATCTRL_REG_A & (1 << OWI_FE)) {
    120e:	80 91 c0 00 	lds	r24, 0x00C0
    1212:	84 ff       	sbrs	r24, 4
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <__vector_18+0x3a>
        // Frame error.
        // Could be caused by a slave connecting to the bus, noice
        // or a short on the bus pulling it low.

        // Read UART DATA REGISTER to clear FE and RXC flags.
        waveform = OWI_UART_DATA_REGISTER;
    1216:	80 91 c6 00 	lds	r24, 0x00C6
        
        // Flag error, and clean up.
        OWIStatus.error = TRUE;
    121a:	80 91 91 01 	lds	r24, 0x0191
    121e:	84 60       	ori	r24, 0x04	; 4
        OWIStatus.busy = FALSE;
    1220:	8e 7f       	andi	r24, 0xFE	; 254
    1222:	80 93 91 01 	sts	0x0191, r24
        OWI_UART_STATCTRL_REG_B &= ~(1 << OWI_UDRIE);
    1226:	80 91 c1 00 	lds	r24, 0x00C1
    122a:	8f 7d       	andi	r24, 0xDF	; 223
    122c:	80 93 c1 00 	sts	0x00C1, r24
        return;
    1230:	5e c0       	rjmp	.+188    	; 0x12ee <__vector_18+0xf6>
    }    

    // Read the UART data register to get the waveform for this bit.
    waveform = OWI_UART_DATA_REGISTER;
    1232:	20 91 c6 00 	lds	r18, 0x00C6
    
    // If the Baud rate is 9600, check for presence signal.
    if (OWI_UART_BAUD_RATE_REG_L == OWI_UBRR_9600) {
    1236:	80 91 c4 00 	lds	r24, 0x00C4
    123a:	84 33       	cpi	r24, 0x34	; 52
    123c:	81 f4       	brne	.+32     	; 0x125e <__vector_18+0x66>
        // Set presenceDetected flag if waveform is different from 
        // what was transmitted on the bus.
        OWIStatus.presenceDetected = (waveform != OWI_UART_RESET);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	20 3f       	cpi	r18, 0xF0	; 240
    1242:	09 f4       	brne	.+2      	; 0x1246 <__vector_18+0x4e>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	98 2f       	mov	r25, r24
    1248:	99 0f       	add	r25, r25
    124a:	80 91 91 01 	lds	r24, 0x0191
    124e:	8c 7f       	andi	r24, 0xFC	; 252

        // Set UART baud rate to 115200 bps.
        OWI_UART_BAUD_RATE_REG_L = OWI_UBRR_115200;
    1250:	24 e0       	ldi	r18, 0x04	; 4
    1252:	20 93 c4 00 	sts	0x00C4, r18

        // Reset bits received counter.
        bitsReceived = 0;
    1256:	10 92 41 01 	sts	0x0141, r1

        // Set busy flag to FALSE.
        OWIStatus.busy = FALSE;
    125a:	89 2b       	or	r24, r25
    125c:	32 c0       	rjmp	.+100    	; 0x12c2 <__vector_18+0xca>
    }
    else { // Baud rate != 9600.	  
        // Increase bits received counter.
        bitsReceived++;
    125e:	80 91 41 01 	lds	r24, 0x0141
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 93 41 01 	sts	0x0141, r24

        // Right shift receive buffer.
        receiveBuffer >>= 1;
    1268:	90 91 40 01 	lds	r25, 0x0140
    126c:	96 95       	lsr	r25
    126e:	90 93 40 01 	sts	0x0140, r25

        // Check value of received bit.
        if (waveform == OWI_UART_READ_BIT) {	// Received 1.        
    1272:	2f 3f       	cpi	r18, 0xFF	; 255
    1274:	19 f4       	brne	.+6      	; 0x127c <__vector_18+0x84>
            // Set msb of receive buffer
            receiveBuffer |= 0x80;
    1276:	90 68       	ori	r25, 0x80	; 128
    1278:	90 93 40 01 	sts	0x0140, r25
        else {	// Received 0.        
            // Do nothing, a 0 has already been shifted in.
        }

        // Was this the last bit?
        if (bitsReceived == OWIBufferLength) {
    127c:	90 91 94 01 	lds	r25, 0x0194
    1280:	89 17       	cp	r24, r25
    1282:	11 f5       	brne	.+68     	; 0x12c8 <__vector_18+0xd0>
    1284:	20 91 40 01 	lds	r18, 0x0140
    1288:	30 91 41 01 	lds	r19, 0x0141
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <__vector_18+0x98>
            // Right shift receive buffer to align bits.
            // Only needed when the number of bits is not divisible by 8.
            while(bitsReceived++ & 0x07)  {
                receiveBuffer >>= 1;   
    128e:	26 95       	lsr	r18

        // Was this the last bit?
        if (bitsReceived == OWIBufferLength) {
            // Right shift receive buffer to align bits.
            // Only needed when the number of bits is not divisible by 8.
            while(bitsReceived++ & 0x07)  {
    1290:	83 2f       	mov	r24, r19
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	87 70       	andi	r24, 0x07	; 7
    1296:	90 70       	andi	r25, 0x00	; 0
    1298:	3f 5f       	subi	r19, 0xFF	; 255
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	c1 f7       	brne	.-16     	; 0x128e <__vector_18+0x96>
    129e:	20 93 40 01 	sts	0x0140, r18
                receiveBuffer >>= 1;   
            }
            // Insert the received data in the OWI Data buffer.
            OWIDataBuffer[byteIndex] = receiveBuffer;
    12a2:	80 91 3f 01 	lds	r24, 0x013F
    12a6:	e0 91 92 01 	lds	r30, 0x0192
    12aa:	f0 91 93 01 	lds	r31, 0x0193
    12ae:	e8 0f       	add	r30, r24
    12b0:	f1 1d       	adc	r31, r1
    12b2:	20 83       	st	Z, r18
            
            // Clean up.
            bitsReceived = 0;
    12b4:	10 92 41 01 	sts	0x0141, r1
            byteIndex = 0;
    12b8:	10 92 3f 01 	sts	0x013F, r1
            OWIStatus.busy = FALSE;
    12bc:	80 91 91 01 	lds	r24, 0x0191
    12c0:	8e 7f       	andi	r24, 0xFE	; 254
    12c2:	80 93 91 01 	sts	0x0191, r24
    12c6:	13 c0       	rjmp	.+38     	; 0x12ee <__vector_18+0xf6>
        }
        else {	// Not the last bit.
            // Is bitsReceived divisible with 8?
            // If so, one byte has been received and the receive buffer
            // must be placed in the big OWI data buffer. 
            if (!(bitsReceived & 0x07)) {
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	87 70       	andi	r24, 0x07	; 7
    12cc:	90 70       	andi	r25, 0x00	; 0
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	71 f4       	brne	.+28     	; 0x12ee <__vector_18+0xf6>
                // Put the received byte in the data buffer and increment byte index.
                OWIDataBuffer[byteIndex] = receiveBuffer;                
    12d2:	80 91 3f 01 	lds	r24, 0x013F
    12d6:	e0 91 92 01 	lds	r30, 0x0192
    12da:	f0 91 93 01 	lds	r31, 0x0193
    12de:	e8 0f       	add	r30, r24
    12e0:	f1 1d       	adc	r31, r1
    12e2:	90 91 40 01 	lds	r25, 0x0140
    12e6:	90 83       	st	Z, r25
                byteIndex++;
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 93 3f 01 	sts	0x013F, r24
            }
        }
    }    
    return;
}
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	3f 91       	pop	r19
    12f8:	2f 91       	pop	r18
    12fa:	0f 90       	pop	r0
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	0f 90       	pop	r0
    1300:	1f 90       	pop	r1
    1302:	18 95       	reti

00001304 <__vector_19>:
 *
 *  This ISR is run every time the UART transmit buffer is empty, thus
 *  automating the process of transmitting and receiving bits.
 */
//#pragma vector = OWI_UART_UDRE_VECT
ISR(USART_UDRE_vect) {
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	2f 93       	push	r18
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
    static u08 bitsSent = 0;
    static u08 transmitBuffer;
    static u08 byteIndex = 0;
    
    // If the UART Baud Rate is 9600 bps, send the Reset signal.
    if (OWI_UART_BAUD_RATE_REG_L == OWI_UBRR_9600)
    1318:	80 91 c4 00 	lds	r24, 0x00C4
    131c:	84 33       	cpi	r24, 0x34	; 52
    131e:	21 f4       	brne	.+8      	; 0x1328 <__vector_19+0x24>
    {
        //Send Reset signal.
        OWI_UART_DATA_REGISTER = OWI_UART_RESET;
    1320:	80 ef       	ldi	r24, 0xF0	; 240
    1322:	80 93 c6 00 	sts	0x00C6, r24
    1326:	11 c0       	rjmp	.+34     	; 0x134a <__vector_19+0x46>
    }
    
    // If this is the first bit in a new transmission, fetch
    // the first byte from the OWI data buffer and reset
    // byte index.
    if (bitsSent == 0)
    1328:	80 91 3e 01 	lds	r24, 0x013E
    132c:	88 23       	and	r24, r24
    132e:	49 f4       	brne	.+18     	; 0x1342 <__vector_19+0x3e>
    {
        byteIndex = 0;
    1330:	10 92 3c 01 	sts	0x013C, r1
        transmitBuffer = OWIDataBuffer[0];        
    1334:	e0 91 92 01 	lds	r30, 0x0192
    1338:	f0 91 93 01 	lds	r31, 0x0193
    133c:	90 81       	ld	r25, Z
    133e:	90 93 3d 01 	sts	0x013D, r25
    } 
    
    // If this is the last bit in the transmission, clean up.  
    if (bitsSent == OWIBufferLength)
    1342:	90 91 94 01 	lds	r25, 0x0194
    1346:	89 17       	cp	r24, r25
    1348:	41 f4       	brne	.+16     	; 0x135a <__vector_19+0x56>
    {
        bitsSent = 0;
    134a:	10 92 3e 01 	sts	0x013E, r1
        OWI_UART_STATCTRL_REG_B &= ~(1 << OWI_UDRIE);
    134e:	80 91 c1 00 	lds	r24, 0x00C1
    1352:	8f 7d       	andi	r24, 0xDF	; 223
    1354:	80 93 c1 00 	sts	0x00C1, r24
    1358:	23 c0       	rjmp	.+70     	; 0x13a0 <__vector_19+0x9c>
    }
    else // Not the last bit.
    {
        // Check lsb of the transmit buffer and transmit corresponding
        // waveform on the bus.
        if (transmitBuffer & 0x01)
    135a:	90 91 3d 01 	lds	r25, 0x013D
    135e:	90 ff       	sbrs	r25, 0
    1360:	04 c0       	rjmp	.+8      	; 0x136a <__vector_19+0x66>
        {
            OWI_UART_DATA_REGISTER = OWI_UART_WRITE1;
    1362:	2f ef       	ldi	r18, 0xFF	; 255
    1364:	20 93 c6 00 	sts	0x00C6, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <__vector_19+0x6a>
        }
        else
        {
            OWI_UART_DATA_REGISTER = OWI_UART_WRITE0;
    136a:	10 92 c6 00 	sts	0x00C6, r1
        }
        
        // Right shift transmit buffer.
        transmitBuffer >>= 1;
    136e:	96 95       	lsr	r25
    1370:	90 93 3d 01 	sts	0x013D, r25
        
        // Increase bits sent counter.
        bitsSent++;
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	80 93 3e 01 	sts	0x013E, r24

        // If the number of bits sent is divisible by 8, a whole byte has
        // been shifted out. Fetch a new from the OWI data buffer.
        if (!(bitsSent & 0x07))
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	87 70       	andi	r24, 0x07	; 7
    137e:	90 70       	andi	r25, 0x00	; 0
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	71 f4       	brne	.+28     	; 0x13a0 <__vector_19+0x9c>
        {
            byteIndex++;
    1384:	80 91 3c 01 	lds	r24, 0x013C
    1388:	8f 5f       	subi	r24, 0xFF	; 255
    138a:	80 93 3c 01 	sts	0x013C, r24
            transmitBuffer = OWIDataBuffer[byteIndex];
    138e:	e0 91 92 01 	lds	r30, 0x0192
    1392:	f0 91 93 01 	lds	r31, 0x0193
    1396:	e8 0f       	add	r30, r24
    1398:	f1 1d       	adc	r31, r1
    139a:	80 81       	ld	r24, Z
    139c:	80 93 3d 01 	sts	0x013D, r24
        }
    }
    return;
}
    13a0:	ff 91       	pop	r31
    13a2:	ef 91       	pop	r30
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <__mulsi3>:
    13b4:	62 9f       	mul	r22, r18
    13b6:	d0 01       	movw	r26, r0
    13b8:	73 9f       	mul	r23, r19
    13ba:	f0 01       	movw	r30, r0
    13bc:	82 9f       	mul	r24, r18
    13be:	e0 0d       	add	r30, r0
    13c0:	f1 1d       	adc	r31, r1
    13c2:	64 9f       	mul	r22, r20
    13c4:	e0 0d       	add	r30, r0
    13c6:	f1 1d       	adc	r31, r1
    13c8:	92 9f       	mul	r25, r18
    13ca:	f0 0d       	add	r31, r0
    13cc:	83 9f       	mul	r24, r19
    13ce:	f0 0d       	add	r31, r0
    13d0:	74 9f       	mul	r23, r20
    13d2:	f0 0d       	add	r31, r0
    13d4:	65 9f       	mul	r22, r21
    13d6:	f0 0d       	add	r31, r0
    13d8:	99 27       	eor	r25, r25
    13da:	72 9f       	mul	r23, r18
    13dc:	b0 0d       	add	r27, r0
    13de:	e1 1d       	adc	r30, r1
    13e0:	f9 1f       	adc	r31, r25
    13e2:	63 9f       	mul	r22, r19
    13e4:	b0 0d       	add	r27, r0
    13e6:	e1 1d       	adc	r30, r1
    13e8:	f9 1f       	adc	r31, r25
    13ea:	bd 01       	movw	r22, r26
    13ec:	cf 01       	movw	r24, r30
    13ee:	11 24       	eor	r1, r1
    13f0:	08 95       	ret

000013f2 <__udivmodqi4>:
    13f2:	99 1b       	sub	r25, r25
    13f4:	79 e0       	ldi	r23, 0x09	; 9
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <__udivmodqi4_ep>

000013f8 <__udivmodqi4_loop>:
    13f8:	99 1f       	adc	r25, r25
    13fa:	96 17       	cp	r25, r22
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <__udivmodqi4_ep>
    13fe:	96 1b       	sub	r25, r22

00001400 <__udivmodqi4_ep>:
    1400:	88 1f       	adc	r24, r24
    1402:	7a 95       	dec	r23
    1404:	c9 f7       	brne	.-14     	; 0x13f8 <__udivmodqi4_loop>
    1406:	80 95       	com	r24
    1408:	08 95       	ret

0000140a <__udivmodhi4>:
    140a:	aa 1b       	sub	r26, r26
    140c:	bb 1b       	sub	r27, r27
    140e:	51 e1       	ldi	r21, 0x11	; 17
    1410:	07 c0       	rjmp	.+14     	; 0x1420 <__udivmodhi4_ep>

00001412 <__udivmodhi4_loop>:
    1412:	aa 1f       	adc	r26, r26
    1414:	bb 1f       	adc	r27, r27
    1416:	a6 17       	cp	r26, r22
    1418:	b7 07       	cpc	r27, r23
    141a:	10 f0       	brcs	.+4      	; 0x1420 <__udivmodhi4_ep>
    141c:	a6 1b       	sub	r26, r22
    141e:	b7 0b       	sbc	r27, r23

00001420 <__udivmodhi4_ep>:
    1420:	88 1f       	adc	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	5a 95       	dec	r21
    1426:	a9 f7       	brne	.-22     	; 0x1412 <__udivmodhi4_loop>
    1428:	80 95       	com	r24
    142a:	90 95       	com	r25
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	08 95       	ret

00001432 <__divmodhi4>:
    1432:	97 fb       	bst	r25, 7
    1434:	09 2e       	mov	r0, r25
    1436:	07 26       	eor	r0, r23
    1438:	0a d0       	rcall	.+20     	; 0x144e <__divmodhi4_neg1>
    143a:	77 fd       	sbrc	r23, 7
    143c:	04 d0       	rcall	.+8      	; 0x1446 <__divmodhi4_neg2>
    143e:	e5 df       	rcall	.-54     	; 0x140a <__udivmodhi4>
    1440:	06 d0       	rcall	.+12     	; 0x144e <__divmodhi4_neg1>
    1442:	00 20       	and	r0, r0
    1444:	1a f4       	brpl	.+6      	; 0x144c <__divmodhi4_exit>

00001446 <__divmodhi4_neg2>:
    1446:	70 95       	com	r23
    1448:	61 95       	neg	r22
    144a:	7f 4f       	sbci	r23, 0xFF	; 255

0000144c <__divmodhi4_exit>:
    144c:	08 95       	ret

0000144e <__divmodhi4_neg1>:
    144e:	f6 f7       	brtc	.-4      	; 0x144c <__divmodhi4_exit>
    1450:	90 95       	com	r25
    1452:	81 95       	neg	r24
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	08 95       	ret

00001458 <__divmodsi4>:
    1458:	97 fb       	bst	r25, 7
    145a:	09 2e       	mov	r0, r25
    145c:	05 26       	eor	r0, r21
    145e:	0e d0       	rcall	.+28     	; 0x147c <__divmodsi4_neg1>
    1460:	57 fd       	sbrc	r21, 7
    1462:	04 d0       	rcall	.+8      	; 0x146c <__divmodsi4_neg2>
    1464:	14 d0       	rcall	.+40     	; 0x148e <__udivmodsi4>
    1466:	0a d0       	rcall	.+20     	; 0x147c <__divmodsi4_neg1>
    1468:	00 1c       	adc	r0, r0
    146a:	38 f4       	brcc	.+14     	; 0x147a <__divmodsi4_exit>

0000146c <__divmodsi4_neg2>:
    146c:	50 95       	com	r21
    146e:	40 95       	com	r20
    1470:	30 95       	com	r19
    1472:	21 95       	neg	r18
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	4f 4f       	sbci	r20, 0xFF	; 255
    1478:	5f 4f       	sbci	r21, 0xFF	; 255

0000147a <__divmodsi4_exit>:
    147a:	08 95       	ret

0000147c <__divmodsi4_neg1>:
    147c:	f6 f7       	brtc	.-4      	; 0x147a <__divmodsi4_exit>
    147e:	90 95       	com	r25
    1480:	80 95       	com	r24
    1482:	70 95       	com	r23
    1484:	61 95       	neg	r22
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	8f 4f       	sbci	r24, 0xFF	; 255
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	08 95       	ret

0000148e <__udivmodsi4>:
    148e:	a1 e2       	ldi	r26, 0x21	; 33
    1490:	1a 2e       	mov	r1, r26
    1492:	aa 1b       	sub	r26, r26
    1494:	bb 1b       	sub	r27, r27
    1496:	fd 01       	movw	r30, r26
    1498:	0d c0       	rjmp	.+26     	; 0x14b4 <__udivmodsi4_ep>

0000149a <__udivmodsi4_loop>:
    149a:	aa 1f       	adc	r26, r26
    149c:	bb 1f       	adc	r27, r27
    149e:	ee 1f       	adc	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	a2 17       	cp	r26, r18
    14a4:	b3 07       	cpc	r27, r19
    14a6:	e4 07       	cpc	r30, r20
    14a8:	f5 07       	cpc	r31, r21
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <__udivmodsi4_ep>
    14ac:	a2 1b       	sub	r26, r18
    14ae:	b3 0b       	sbc	r27, r19
    14b0:	e4 0b       	sbc	r30, r20
    14b2:	f5 0b       	sbc	r31, r21

000014b4 <__udivmodsi4_ep>:
    14b4:	66 1f       	adc	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	1a 94       	dec	r1
    14be:	69 f7       	brne	.-38     	; 0x149a <__udivmodsi4_loop>
    14c0:	60 95       	com	r22
    14c2:	70 95       	com	r23
    14c4:	80 95       	com	r24
    14c6:	90 95       	com	r25
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	bd 01       	movw	r22, r26
    14ce:	cf 01       	movw	r24, r30
    14d0:	08 95       	ret

000014d2 <_exit>:
    14d2:	f8 94       	cli

000014d4 <__stop_program>:
    14d4:	ff cf       	rjmp	.-2      	; 0x14d4 <__stop_program>
